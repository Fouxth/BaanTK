// ü§ñ LINE Auto-Reply Service for BaanTK
const { Client } = require("@line/bot-sdk");
const functions = require("firebase-functions");

// LINE Bot Configuration - try multiple sources
const LINE_CONFIG = {
  channelAccessToken: 
    functions.config().line?.channel_access_token || 
    process.env.LINE_CHANNEL_ACCESS_TOKEN || 
    process.env.CHANNEL_ACCESS_TOKEN ||
    "htsHzjHcSkA1Xu3Qtf7C/ZqRv+o0WFwCXCA93W1NPNEGJrH1YbPNsEc5GsYDsQu4L3GMybtuIYHG4I+4XPLFXLf04RKM5+rmLV/kYSuL2WsOHZNv0Dme3ebMtLDVdnLC2OSM2JA+gXHumzUlmOM2BwdB04t89/1O/w1cDnyilFU=",
  channelSecret: 
    functions.config().line?.channel_secret || 
    process.env.LINE_CHANNEL_SECRET || 
    process.env.CHANNEL_SECRET ||
    "87fe8316138c02b02a4e20dafde563fd"
};

console.log("üîß LINE Config loaded:", {
  hasAccessToken: !!LINE_CONFIG.channelAccessToken,
  hasSecret: !!LINE_CONFIG.channelSecret,
  tokenLength: LINE_CONFIG.channelAccessToken?.length || 0
});

const lineClient = new Client(LINE_CONFIG);

// Auto-reply messages
const AUTO_REPLIES = {
  greeting: [
    "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö! ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà BaanTK üè†",
    "‡∏û‡∏ß‡∏Å‡πÄ‡∏£‡∏≤‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ô‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏î‡πà‡∏ß‡∏ô",
    "‡∏Å‡∏î‡πÄ‡∏°‡∏ô‡∏π‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏¥‡∏°‡∏û‡πå '‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"
  ],
  help: [
    "üìã ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ:",
    "‚Ä¢ '‡∏™‡∏°‡∏±‡∏Ñ‡∏£' - ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏¥‡∏ô‡πÄ‡∏ä‡∏∑‡πà‡∏≠",
    "‚Ä¢ '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞' - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞",
    "‚Ä¢ '‡∏ä‡∏≥‡∏£‡∏∞' - ‡∏™‡πà‡∏á‡∏´‡∏•‡∏±‡∏Å‡∏ê‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞",
    "‚Ä¢ '‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠' - ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà",
    "‚Ä¢ '‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç' - ‡∏î‡∏π‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£"
  ],
  register: [
    "üìù ‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏¥‡∏ô‡πÄ‡∏ä‡∏∑‡πà‡∏≠ BaanTK",
    "‡∏Ñ‡∏•‡∏¥‡∏Å‡∏•‡∏¥‡∏á‡∏Ñ‡πå‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£:",
    "https://baan-tk.web.app/liff-register.html",
    "",
    "üí° ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£:",
    "‚Ä¢ ‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô",
    "‚Ä¢ ‡∏´‡∏•‡∏±‡∏Å‡∏ê‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà",
    "‚Ä¢ ‡∏´‡∏•‡∏±‡∏Å‡∏ê‡∏≤‡∏ô‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ"
  ],
  status: [
    "üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£",
    "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡πà‡∏á‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì",
    "‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì"
  ],
  payment: [
    "üí∞ ‡∏™‡πà‡∏á‡∏´‡∏•‡∏±‡∏Å‡∏ê‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô",
    "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡πà‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏™‡∏•‡∏¥‡∏õ‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô",
    "‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏∞‡∏ö‡∏∏‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡∏∞‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ä‡∏≥‡∏£‡∏∞"
  ],
  contact: [
    "üìû ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà BaanTK",
    "‚Ä¢ ‡πÇ‡∏ó‡∏£: 02-123-4567",
    "‚Ä¢ LINE: @baantk",
    "‚Ä¢ Email: info@baantk.com",
    "‚Ä¢ ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏Å‡∏≤‡∏£: ‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå-‡∏®‡∏∏‡∏Å‡∏£‡πå 8:00-17:00"
  ],
  terms: [
    "üìã ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£ BaanTK",
    "‚Ä¢ ‡∏≠‡∏≤‡∏¢‡∏∏ 20-65 ‡∏õ‡∏µ",
    "‚Ä¢ ‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏õ‡∏£‡∏∞‡∏à‡∏≥",
    "‚Ä¢ ‡∏ß‡∏á‡πÄ‡∏á‡∏¥‡∏ô 1,000-50,000 ‡∏ö‡∏≤‡∏ó",
    "‚Ä¢ ‡∏î‡∏≠‡∏Å‡πÄ‡∏ö‡∏µ‡πâ‡∏¢ 10-20% ‡∏ï‡πà‡∏≠‡πÄ‡∏î‡∏∑‡∏≠‡∏ô",
    "‚Ä¢ ‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏ú‡πà‡∏≠‡∏ô 1-12 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô"
  ],
  default: [
    "‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö ‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì üòÖ",
    "‡∏û‡∏¥‡∏°‡∏û‡πå '‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î",
    "‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á‡∏ó‡∏µ‡πà 02-123-4567"
  ]
};

// Process incoming LINE messages
async function processLineMessage(event) {
  if (event.type !== "message" || event.message.type !== "text") {
    return null;
  }

  const userId = event.source.userId;
  const messageText = event.message.text.toLowerCase().trim();
  
  console.log(`üì± LINE Message from ${userId}: ${messageText}`);

  // Determine response based on message content
  let replyMessages = [];
  
  if (messageText.includes("‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ") || messageText.includes("hello") || messageText.includes("hi")) {
    replyMessages = AUTO_REPLIES.greeting;
  } else if (messageText.includes("‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠") || messageText.includes("help") || messageText.includes("‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á")) {
    replyMessages = AUTO_REPLIES.help;
  } else if (messageText.includes("‡∏™‡∏°‡∏±‡∏Ñ‡∏£") || messageText.includes("register") || messageText.includes("‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô")) {
    replyMessages = AUTO_REPLIES.register;
  } else if (messageText.includes("‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞") || messageText.includes("status") || messageText.includes("‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö")) {
    replyMessages = AUTO_REPLIES.status;
  } else if (messageText.includes("‡∏ä‡∏≥‡∏£‡∏∞") || messageText.includes("payment") || messageText.includes("‡πÇ‡∏≠‡∏ô")) {
    replyMessages = AUTO_REPLIES.payment;
  } else if (messageText.includes("‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠") || messageText.includes("contact") || messageText.includes("‡πÇ‡∏ó‡∏£")) {
    replyMessages = AUTO_REPLIES.contact;
  } else if (messageText.includes("‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç") || messageText.includes("terms") || messageText.includes("‡∏î‡∏≠‡∏Å‡πÄ‡∏ö‡∏µ‡πâ‡∏¢")) {
    replyMessages = AUTO_REPLIES.terms;
  } else {
    replyMessages = AUTO_REPLIES.default;
  }

  // Send reply messages
  if (replyMessages.length > 0) {
    const messages = replyMessages.map(text => ({ type: "text", text }));
    
    try {
      await lineClient.replyMessage(event.replyToken, messages);
      console.log(`‚úÖ Sent ${messages.length} reply messages to ${userId}`);
      return { success: true, messagesSent: messages.length };
    } catch (error) {
      console.error("‚ùå Failed to send LINE reply:", error);
      return { success: false, error: error.message };
    }
  }

  return null;
}

// Send push message to specific user
async function sendPushMessage(userId, messages) {
  try {
    const messageObjects = messages.map(text => ({ type: "text", text }));
    await lineClient.pushMessage(userId, messageObjects);
    console.log(`‚úÖ Sent push message to ${userId}`);
    return { success: true };
  } catch (error) {
    console.error("‚ùå Failed to send push message:", error);
    return { success: false, error: error.message };
  }
}

// Send broadcast message to all users
async function sendBroadcastMessage(messages) {
  try {
    const messageObjects = messages.map(text => ({ type: "text", text }));
    await lineClient.broadcast(messageObjects);
    console.log("‚úÖ Sent broadcast message");
    return { success: true };
  } catch (error) {
    console.error("‚ùå Failed to send broadcast message:", error);
    return { success: false, error: error.message };
  }
}

// Verify LINE webhook signature
function verifySignature(body, signature) {
  const crypto = require("crypto");
  const channelSecret = LINE_CONFIG.channelSecret;
  
  const hash = crypto
    .createHmac("sha256", channelSecret)
    .update(body)
    .digest("base64");
  
  return hash === signature;
}

module.exports = {
  processLineMessage,
  sendPushMessage,
  sendBroadcastMessage,
  verifySignature,
  AUTO_REPLIES
};
