// üìÑ Contract Generation and Management Service
const admin = require("firebase-admin");
const { v4: uuidv4 } = require("uuid");

class ContractService {
  constructor() {
    this.contractVersion = "2.0";
  }

  // Generate contract data
  generateContract(borrowerData, loanTerms, settings = {}) {
    const contractId = uuidv4();
    const today = new Date();
    
    return {
      contractId: contractId,
      version: this.contractVersion,
      borrowerId: borrowerData.id || borrowerData.borrowerId,
      
      // Borrower information
      borrower: {
        name: `${borrowerData.firstName} ${borrowerData.lastName}`,
        idCard: borrowerData.idCard,
        address: borrowerData.address,
        userId: borrowerData.userId
      },
      
      // Loan terms
      loan: {
        principal: loanTerms.principal,
        interestRate: loanTerms.interestRate,
        totalAmount: loanTerms.totalWithInterest,
        installmentAmount: loanTerms.installmentAmount,
        installments: loanTerms.installments,
        frequency: loanTerms.frequency,
        startDate: today.toISOString(),
        dueDate: loanTerms.dueDate.toISOString()
      },
      
      // Legal terms
      terms: this.generateLegalTerms(loanTerms, settings),
      
      // Contract status
      status: "pending_signature",
      createdAt: admin.firestore.FieldValue.serverTimestamp(),
      updatedAt: admin.firestore.FieldValue.serverTimestamp(),
      
      // Signature fields
      signatures: {
        borrower: null,
        lender: null
      },
      
      // Additional metadata
      metadata: {
        generatedBy: "system",
        ipAddress: null,
        userAgent: null
      }
    };
  }

  // Generate legal terms and conditions
  generateLegalTerms(loanTerms, settings) {
    const frequencyText = this.getFrequencyText(loanTerms.frequency);
    
    return {
      title: "‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡πÄ‡∏á‡∏¥‡∏ô‡∏Å‡∏π‡πâ BaanTK",
      clauses: [
        {
          section: "1. ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏á‡∏¥‡∏ô‡∏Å‡∏π‡πâ",
          content: `‡∏ú‡∏π‡πâ‡∏Å‡∏π‡πâ‡∏ï‡∏Å‡∏•‡∏á‡∏Å‡∏π‡πâ‡πÄ‡∏á‡∏¥‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô ${loanTerms.principal.toLocaleString()} ‡∏ö‡∏≤‡∏ó ‡πÇ‡∏î‡∏¢‡∏°‡∏µ‡∏î‡∏≠‡∏Å‡πÄ‡∏ö‡∏µ‡πâ‡∏¢ ${(loanTerms.interestRate * 100).toFixed(2)}% ‡∏ï‡πà‡∏≠‡∏õ‡∏µ`
        },
        {
          section: "2. ‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô",
          content: `‡∏ú‡∏π‡πâ‡∏Å‡∏π‡πâ‡∏ï‡∏Å‡∏•‡∏á‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏á‡∏ß‡∏î‡∏•‡∏∞ ${loanTerms.installmentAmount.toLocaleString()} ‡∏ö‡∏≤‡∏ó ${frequencyText} ‡∏£‡∏ß‡∏° ${loanTerms.installments} ‡∏á‡∏ß‡∏î`
        },
        {
          section: "3. ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏ú‡∏¥‡∏î‡∏ô‡∏±‡∏î",
          content: "‡∏´‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡∏Å‡∏π‡πâ‡∏ú‡∏¥‡∏î‡∏ô‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô 7 ‡∏ß‡∏±‡∏ô ‡∏ú‡∏π‡πâ‡πÉ‡∏´‡πâ‡∏Å‡∏π‡πâ‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÄ‡∏á‡∏¥‡∏ô‡∏ï‡πâ‡∏ô‡πÅ‡∏•‡∏∞‡∏î‡∏≠‡∏Å‡πÄ‡∏ö‡∏µ‡πâ‡∏¢‡∏Ñ‡∏∑‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏±‡∏ô‡∏ó‡∏µ"
        },
        {
          section: "4. ‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏™‡∏±‡∏ç‡∏ç‡∏≤",
          content: "‡∏ú‡∏π‡πâ‡∏Å‡∏π‡πâ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÑ‡∏î‡πâ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏õ‡∏£‡∏±‡∏ö"
        },
        {
          section: "5. ‡∏Ç‡πâ‡∏≠‡∏ï‡∏Å‡∏•‡∏á‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ",
          content: "‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡∏†‡∏≤‡∏¢‡πÉ‡∏ï‡πâ‡∏Å‡∏é‡∏´‡∏°‡∏≤‡∏¢‡πÑ‡∏ó‡∏¢ ‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏û‡∏¥‡∏û‡∏≤‡∏ó‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏á‡∏±‡∏ö‡πÇ‡∏î‡∏¢‡∏Å‡∏≤‡∏£‡πÑ‡∏Å‡∏•‡πà‡πÄ‡∏Å‡∏•‡∏µ‡πà‡∏¢"
        }
      ],
      acceptanceText: "‡∏Ç‡πâ‡∏≤‡∏û‡πÄ‡∏à‡πâ‡∏≤‡πÑ‡∏î‡πâ‡∏≠‡πà‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÅ‡∏•‡πâ‡∏ß ‡πÅ‡∏•‡∏∞‡∏¢‡∏¥‡∏ô‡∏¢‡∏≠‡∏°‡∏ú‡∏π‡∏Å‡∏û‡∏±‡∏ô‡∏ï‡∏≤‡∏°‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ô‡∏µ‡πâ",
      signatureDate: new Date().toLocaleDateString("th-TH"),
      effectiveDate: new Date().toLocaleDateString("th-TH")
    };
  }

  // Get frequency text in Thai
  getFrequencyText(frequency) {
    const frequencyMap = {
      daily: "‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô",
      weekly: "‡∏ó‡∏∏‡∏Å‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå", 
      monthly: "‡∏ó‡∏∏‡∏Å‡πÄ‡∏î‡∏∑‡∏≠‡∏ô"
    };
    return frequencyMap[frequency] || "‡∏ï‡∏≤‡∏°‡∏Å‡∏≥‡∏´‡∏ô‡∏î";
  }

  // Save contract to database
  async saveContract(contractData, borrowerId) {
    try {
      const db = admin.firestore();
      
      // Save contract
      const contractRef = await db.collection("contracts").add(contractData);
      
      // Update borrower with contract reference
      if (borrowerId) {
        await db.collection("borrowers").doc(borrowerId).update({
          contractId: contractRef.id,
          contractGenerated: true,
          updatedAt: admin.firestore.FieldValue.serverTimestamp()
        });
      }
      
      console.log(`üìÑ Contract saved: ${contractRef.id}`);
      return contractRef.id;
    } catch (error) {
      console.error("Error saving contract:", error);
      throw error;
    }
  }

  // Sign contract
  async signContract(contractId, borrowerId, signatureData, req = null) {
    try {
      const db = admin.firestore();
      const contractRef = db.collection("contracts").doc(contractId);
      
      const updateData = {
        "signatures.borrower": {
          signature: signatureData.signature,
          timestamp: signatureData.timestamp || admin.firestore.FieldValue.serverTimestamp(),
          ipAddress: signatureData.ipAddress || req?.ip,
          userAgent: signatureData.userAgent || req?.get("User-Agent")
        },
        status: "signed",
        signedAt: admin.firestore.FieldValue.serverTimestamp(),
        updatedAt: admin.firestore.FieldValue.serverTimestamp()
      };
      
      await contractRef.update(updateData);
      
      console.log(`‚úçÔ∏è Contract signed: ${contractId}`);
      return true;
    } catch (error) {
      console.error("Error signing contract:", error);
      throw error;
    }
  }

  // Generate contract HTML for display/printing
  generateContractHTML(contractData) {
    const { borrower, loan, terms } = contractData;
    
    return `
    <!DOCTYPE html>
    <html lang="th">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡πÄ‡∏á‡∏¥‡∏ô‡∏Å‡∏π‡πâ - ${contractData.contractId}</title>
        <style>
            body { font-family: 'Sarabun', Arial, sans-serif; line-height: 1.6; margin: 20px; }
            .header { text-align: center; margin-bottom: 30px; }
            .section { margin-bottom: 20px; }
            .signature-area { margin-top: 50px; display: flex; justify-content: space-between; }
            .signature-box { width: 200px; text-align: center; border-top: 1px solid #000; padding-top: 10px; }
            table { width: 100%; border-collapse: collapse; margin: 20px 0; }
            th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
            th { background-color: #f2f2f2; }
        </style>
    </head>
    <body>
        <div class="header">
            <h1>${terms.title}</h1>
            <p>‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏™‡∏±‡∏ç‡∏ç‡∏≤: ${contractData.contractId}</p>
            <p>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: ${terms.signatureDate}</p>
        </div>
        
        <div class="section">
            <h3>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏Å‡∏π‡πâ</h3>
            <p><strong>‡∏ä‡∏∑‡πà‡∏≠:</strong> ${borrower.name}</p>
            <p><strong>‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô:</strong> ${borrower.idCard}</p>
            <p><strong>‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà:</strong> ${borrower.address}</p>
        </div>
        
        <div class="section">
            <h3>‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡∏Å‡∏π‡πâ</h3>
            <table>
                <tr><th>‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£</th><th>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô</th></tr>
                <tr><td>‡πÄ‡∏á‡∏¥‡∏ô‡∏ï‡πâ‡∏ô</td><td>${loan.principal.toLocaleString()} ‡∏ö‡∏≤‡∏ó</td></tr>
                <tr><td>‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏î‡∏≠‡∏Å‡πÄ‡∏ö‡∏µ‡πâ‡∏¢</td><td>${(loan.interestRate * 100).toFixed(2)}% ‡∏ï‡πà‡∏≠‡∏õ‡∏µ</td></tr>
                <tr><td>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏£‡∏ß‡∏°</td><td>${loan.totalAmount.toLocaleString()} ‡∏ö‡∏≤‡∏ó</td></tr>
                <tr><td>‡∏ä‡∏≥‡∏£‡∏∞‡∏á‡∏ß‡∏î‡∏•‡∏∞</td><td>${loan.installmentAmount.toLocaleString()} ‡∏ö‡∏≤‡∏ó</td></tr>
                <tr><td>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏á‡∏ß‡∏î</td><td>${loan.installments} ‡∏á‡∏ß‡∏î</td></tr>
                <tr><td>‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞</td><td>${this.getFrequencyText(loan.frequency)}</td></tr>
            </table>
        </div>
        
        <div class="section">
            <h3>‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏ï‡∏Å‡∏•‡∏á</h3>
            ${terms.clauses.map(clause => `
                <div style="margin-bottom: 15px;">
                    <strong>${clause.section}</strong><br>
                    ${clause.content}
                </div>
            `).join('')}
        </div>
        
        <div class="section">
            <p><strong>‡∏Å‡∏≤‡∏£‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç:</strong></p>
            <p>${terms.acceptanceText}</p>
        </div>
        
        <div class="signature-area">
            <div class="signature-box">
                <p>‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô‡∏ú‡∏π‡πâ‡∏Å‡∏π‡πâ</p>
                <p>(${borrower.name})</p>
            </div>
            <div class="signature-box">
                <p>‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏´‡πâ‡∏Å‡∏π‡πâ</p>
                <p>(BaanTK)</p>
            </div>
        </div>
    </body>
    </html>
    `;
  }

  // Convert number to Thai text (for legal documents)
  numberToThaiText(number) {
    // Simplified version - in production, use a proper Thai number conversion library
    const ones = ['', '‡∏´‡∏ô‡∏∂‡πà‡∏á', '‡∏™‡∏≠‡∏á', '‡∏™‡∏≤‡∏°', '‡∏™‡∏µ‡πà', '‡∏´‡πâ‡∏≤', '‡∏´‡∏Å', '‡πÄ‡∏à‡πá‡∏î', '‡πÅ‡∏õ‡∏î', '‡πÄ‡∏Å‡πâ‡∏≤'];
    const tens = ['', '', '‡∏¢‡∏µ‡πà‡∏™‡∏¥‡∏ö', '‡∏™‡∏≤‡∏°‡∏™‡∏¥‡∏ö', '‡∏™‡∏µ‡πà‡∏™‡∏¥‡∏ö', '‡∏´‡πâ‡∏≤‡∏™‡∏¥‡∏ö', '‡∏´‡∏Å‡∏™‡∏¥‡∏ö', '‡πÄ‡∏à‡πá‡∏î‡∏™‡∏¥‡∏ö', '‡πÅ‡∏õ‡∏î‡∏™‡∏¥‡∏ö', '‡πÄ‡∏Å‡πâ‡∏≤‡∏™‡∏¥‡∏ö'];
    
    if (number === 0) return '‡∏®‡∏π‡∏ô‡∏¢‡πå';
    if (number < 10) return ones[number];
    if (number < 100) {
      const ten = Math.floor(number / 10);
      const one = number % 10;
      return tens[ten] + ones[one];
    }
    
    // For larger numbers, return the number as string
    return number.toString();
  }
}

module.exports = new ContractService();
