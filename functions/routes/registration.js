// üìù Registration Routes Module
const express = require("express");
const admin = require("firebase-admin");
const { createRegistrationLimiter } = require("../middleware/security");
const validationService = require("../validation");
const creditScoringService = require("../creditScoring");
const governmentAPI = require("../governmentAPI");
const securityService = require("../security");
const loanHelpers = require("../modules/loanHelpers");

const router = express.Router();

// ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ db ‡πÑ‡∏õ‡πÉ‡∏ô function ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ Firebase Admin initialize ‡∏Å‡πà‡∏≠‡∏ô
function getDb() {
  return admin.firestore();
}

// LIFF Register endpoint with production-grade security and validation
router.post("/liff-register", createRegistrationLimiter(), async (req, res) => {
  const startTime = Date.now();
  const requestId = `req_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;

  try {
    console.log(`üì• Registration request [${requestId}]:`, {
      ip: req.ip,
      userAgent: req.get("User-Agent"),
      timestamp: new Date().toISOString(),
      hasBody: !!req.body
    });

    // Enhanced input validation using validation service
    const validation = validationService.validateRegistration(req.body);
    if (!validation.isValid) {
      console.log(`‚ùå Validation failed [${requestId}]:`, validation.errors);

      // Log validation failure
      await securityService.logSecurityEvent("validation_failed", {
        requestId,
        errors: validation.errors,
        requestBody: req.body
      }, req);

      return res.status(400).json({
        error: "Validation failed",
        message: "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á",
        details: validation.errors
      });
    }

    const userData = validation.data;
    console.log(`‚úÖ Input validation passed [${requestId}]:`, userData.firstName, userData.lastName);

    // üîç Enhanced image handling - support both combined and separate images
    const imageData = {};

    // Handle combined images or separate images
    if (req.body.idCardImage) {
      imageData.idCardImage = req.body.idCardImage;
      imageData.idCardImageName = req.body.idCardImageName || "id_card.jpg";
      imageData.idCardImageSize = req.body.idCardImageSize || 0;
    }

    if (req.body.selfieImage) {
      imageData.selfieImage = req.body.selfieImage;
      imageData.selfieImageName = req.body.selfieImageName || "selfie.jpg";
      imageData.selfieImageSize = req.body.selfieImageSize || 0;
    }

    // Validate required images
    if (!imageData.idCardImage) {
      console.log(`‚ö†Ô∏è Missing ID card image [${requestId}]`);
      return res.status(400).json({
        error: "Missing ID card image",
        message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô"
      });
    }

    if (!imageData.selfieImage) {
      console.log(`‚ö†Ô∏è Missing selfie image [${requestId}]`);
      return res.status(400).json({
        error: "Missing selfie image", 
        message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏ñ‡πà‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì"
      });
    }

    console.log(`üì∑ Image processing [${requestId}]:`, {
      hasIdCard: !!imageData.idCardImage,
      hasSelfie: !!imageData.selfieImage,
      idCardSize: imageData.idCardImageSize,
      selfieSize: imageData.selfieImageSize
    });

    // üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô‡∏ú‡πà‡∏≤‡∏ô API
    console.log(`üîç Verifying ID Card via API [${requestId}]`);

    const idCardValidation = await governmentAPI.validateIDCardBasic(userData.idCard);
    if (!idCardValidation.isValid) {
      console.log(`‚ùå ID Card validation failed [${requestId}]:`, idCardValidation.errors);

      await securityService.logSecurityEvent("invalid_id_card", {
        requestId,
        idCard: userData.idCard,
        errors: idCardValidation.errors
      }, req);

      return res.status(400).json({
        error: "Invalid ID Card",
        message: "‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á",
        details: idCardValidation.errors
      });
    }

    // üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô
    const cardVerification = await governmentAPI.verifyIDCardStatus(userData.idCard);
    if (!cardVerification.valid) {
      console.log(`‚ùå ID Card verification failed [${requestId}]:`, cardVerification.message);

      await securityService.logSecurityEvent("id_card_verification_failed", {
        requestId,
        idCard: userData.idCard,
        status: cardVerification.status,
        message: cardVerification.message
      }, req);

      return res.status(400).json({
        error: "ID Card verification failed",
        message: cardVerification.message,
        status: cardVerification.status
      });
    }

    console.log(`‚úÖ ID Card verified successfully [${requestId}]`);

    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    const enhancedUserData = {
      ...userData,
      ...imageData, // ‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
      idCardVerified: true,
      idCardStatus: cardVerification.status,
      verificationTimestamp: new Date().toISOString()
    };

    console.log(`‚úÖ Enhanced user data prepared [${requestId}]`);

    // Enhanced blacklist check with detailed logging
    const isBlacklisted = await loanHelpers.checkBlacklist(enhancedUserData.idCard, enhancedUserData.userId);
    if (isBlacklisted) {
      console.log(`üö´ Blacklist detected [${requestId}]:`, enhancedUserData.idCard);

      // Log blacklist attempt with high priority
      await securityService.logSecurityEvent("blacklist_attempt", {
        requestId,
        idCard: enhancedUserData.idCard,
        userId: enhancedUserData.userId,
        userName: `${enhancedUserData.firstName} ${enhancedUserData.lastName}`,
        severity: "HIGH"
      }, req);

      return res.status(403).json({
        error: "Application not permitted",
        message: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡∏∑‡πà‡∏ô‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà"
      });
    }

    // Enhanced duplicate check
    const isDuplicate = await loanHelpers.checkDuplicateApplication(enhancedUserData.idCard, enhancedUserData.userId);
    if (isDuplicate) {
      console.log(`üîÑ Duplicate application [${requestId}]:`, enhancedUserData.idCard);

      await securityService.logSecurityEvent("duplicate_application", {
        requestId,
        idCard: enhancedUserData.idCard,
        userId: enhancedUserData.userId
      }, req);

      return res.status(409).json({
        error: "Duplicate application",
        message: "‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡πà‡∏ô‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤‡πÅ‡∏•‡πâ‡∏ß ‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏∑‡πà‡∏ô‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏£‡πá‡∏ß‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ"
      });
    }

    // Enhanced credit scoring with detailed analysis
    const creditAssessment = await creditScoringService.calculateCreditScore(enhancedUserData, enhancedUserData.userId);
    console.log(`üìä Credit assessment [${requestId}]:`, {
      score: creditAssessment.score,
      grade: creditAssessment.grade,
      riskLevel: creditAssessment.riskLevel,
      recommendation: creditAssessment.recommendation
    });

    // Calculate loan terms with enhanced logic
    const loanTerms = loanHelpers.calculateLoanTerms(enhancedUserData, creditAssessment);

    // Auto-approval logic with enhanced criteria
    const autoApproval = loanHelpers.determineAutoApproval(creditAssessment, enhancedUserData, loanTerms);

    // Create comprehensive borrower record with image data
    const borrowerData = loanHelpers.createBorrowerRecord(enhancedUserData, creditAssessment, loanTerms, autoApproval, req, requestId, imageData);

    // Save to Firestore with transaction
    const docRef = await getDb().collection("borrowers").add(borrowerData);
    console.log(`üíæ Borrower record created [${requestId}]:`, docRef.id);

    // Log successful application
    await Promise.all([
      getDb().collection("applicationLogs").add({
        type: "new_application",
        requestId,
        borrowerId: docRef.id,
        userId: enhancedUserData.userId,
        idCard: enhancedUserData.idCard,
        amount: enhancedUserData.amount,
        creditScore: creditAssessment.score,
        status: autoApproval.status,
        autoApproved: autoApproval.autoApproved,
        dataSource: "government_registry",
        verificationTimestamp: enhancedUserData.verificationTimestamp,
        processingTime: Date.now() - startTime,
        timestamp: admin.firestore.FieldValue.serverTimestamp()
      }),

      // Send notification if approved
      autoApproval.autoApproved ? loanHelpers.sendApprovalNotification(enhancedUserData, loanTerms, docRef.id) : null
    ]);

    // Generate comprehensive response
    const responseData = {
      success: true,
      message: autoApproval.autoApproved ?
        "üéâ ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÄ‡∏á‡∏¥‡∏ô‡∏Å‡∏π‡πâ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÇ‡∏≠‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á" :
        "üìù ‡∏¢‡∏∑‡πà‡∏ô‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏à‡∏≤‡∏Å‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà (‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤ 1-24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á)",
      applicationId: docRef.id,
      requestId: requestId,
      data: {
        applicant: {
          firstName: enhancedUserData.firstName,
          lastName: enhancedUserData.lastName,
          idCard: `${enhancedUserData.idCard.substr(0, 4)}-xxxx-xxxx-x${enhancedUserData.idCard.substr(-1)}`,
          verified: enhancedUserData.idCardVerified
        },
        loan: {
          requestedAmount: enhancedUserData.amount,
          totalAmount: loanTerms.totalWithInterest,
          interestRate: `${(loanTerms.interestRate * 100).toFixed(1)}%`,
          frequency: enhancedUserData.frequency,
          dueDate: loanTerms.dueDate.toLocaleDateString("th-TH"),
          installmentAmount: loanTerms.installmentAmount
        },
        assessment: {
          creditScore: creditAssessment.score,
          grade: creditAssessment.grade,
          riskLevel: creditAssessment.riskLevel,
          status: autoApproval.status,
          autoApproved: autoApproval.autoApproved
        },
        verification: {
          idCardStatus: enhancedUserData.idCardStatus,
          verifiedAt: enhancedUserData.verificationTimestamp
        },
        nextSteps: autoApproval.autoApproved ?
          ["‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏Å‡∏π‡πâ", "‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏à‡∏≤‡∏Å‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà"] :
          ["‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏à‡∏≤‡∏Å‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà", "‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤ 1-3 ‡∏ß‡∏±‡∏ô‡∏ó‡∏≥‡∏Å‡∏≤‡∏£"]
      }
    };

    const processingTime = Date.now() - startTime;
    console.log(`‚úÖ Registration completed [${requestId}]:`, {
      id: docRef.id,
      name: `${enhancedUserData.titleName} ${enhancedUserData.officialFirstName || enhancedUserData.firstName} ${enhancedUserData.officialLastName || enhancedUserData.lastName}`,
      amount: enhancedUserData.amount,
      status: autoApproval.status,
      creditScore: creditAssessment.score,
      dataSource: "government_registry",
      processingTime: `${processingTime}ms`
    });

    res.status(200).json(responseData);
  } catch (error) {
    console.error(`‚ùå Registration error [${requestId}]:`, error);

    // Enhanced error logging
    try {
      await Promise.all([
        getDb().collection("errorLogs").add({
          type: "registration_error",
          requestId,
          error: error.message,
          stack: error.stack,
          requestBody: req.body,
          ip: req.ip,
          userAgent: req.get("User-Agent"),
          timestamp: admin.firestore.FieldValue.serverTimestamp()
        }),

        securityService.logSecurityEvent("registration_system_error", {
          requestId,
          error: error.message,
          severity: "HIGH"
        }, req)
      ]);
    } catch (logError) {
      console.error("Failed to log error:", logError);
    }

    res.status(500).json({
      error: "Internal server error",
      message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á ‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà",
      requestId: requestId
    });
  }
});

module.exports = router;