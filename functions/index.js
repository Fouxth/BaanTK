// üîÑ Updated LINE Loan Bot with extra fields + QR + Status Handling
require("dotenv").config();
const { middleware, Client } = require("@line/bot-sdk");
const admin = require("firebase-admin");

const functions = require("firebase-functions");
const express = require("express");
const bodyParser = require("body-parser");
const cors = require("cors");
const rateLimit = require("express-rate-limit");

// Import custom modules
const { approvedFlex, dueReminderFlex, paymentSlipReceivedFlex } = require("./statusFlex");
const flexRegisterTemplate = require("./flexRegisterTemplate");
const welcomeFlex = require("./welcomeFlex");
const menuFlex = require("./menuFlex");
const uploadImageFromLine = require("./uploadToStorage");
const { notifyDueDate } = require("./dueNotifier");

// Import DataManager (will create if not exists)
let DataManager;
try {
  DataManager = require("./utils/dataManager");
} catch (error) {
  console.log("‚ö†Ô∏è DataManager not found, creating basic fallback...");
  DataManager = {
    calculateCreditScore: () => 600,
    checkBlacklist: () => ({ isBlacklisted: false }),
    shouldAutoApprove: () => false,
    generateAdvancedReport: () => ({}),
    calculateOverdueInterest: () => ({ overdueDays: 0, penalty: 0, totalOwed: 0 }),
    sendEscalatedReminder: () => true,
    addToBlacklist: () => true
  };
}

if (!admin.apps.length) {
  admin.initializeApp({
    credential: admin.credential.cert({
      projectId: process.env.GOOGLE_PROJECT_ID,
      clientEmail: process.env.GOOGLE_CLIENT_EMAIL,
      privateKey: process.env.GOOGLE_PRIVATE_KEY.replace(/\\n/g, "\n")
    }),
    storageBucket: "baan-tk.appspot.com" // ‚úÖ ‡∏ñ‡πâ‡∏≤‡∏ô‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ Storage ‡∏î‡πâ‡∏ß‡∏¢
  });
}
const db = admin.firestore();

const config = {
  channelAccessToken: process.env.CHANNEL_ACCESS_TOKEN,
  channelSecret: process.env.CHANNEL_SECRET
};
const client = new Client(config);

const app = express();
app.use(express.json());
app.use(bodyParser.raw({ type: "*/*" }));
app.use(middleware(config));

// ‚úÖ CORS Configuration
app.use(cors({
  origin: [
    "https://baan-tk.web.app",
    "https://baan-tk.firebaseapp.com",
    "https://liff.line.me",
    "http://localhost:3000", // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö development
    "http://localhost:5000" // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Firebase emulator
  ],
  credentials: true,
  methods: ["GET", "POST", "PUT", "DELETE", "OPTIONS"],
  allowedHeaders: ["Content-Type", "Authorization", "X-Requested-With"]
}));

// ‚úÖ Rate Limiting
const limiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 minutes
  max: 100, // limit each IP to 100 requests per windowMs
  message: "Too many requests from this IP, please try again later.",
  standardHeaders: true,
  legacyHeaders: false
});

const authLimiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 minutes
  max: 5, // limit each IP to 5 auth requests per windowMs
  message: "Too many authentication attempts, please try again later.",
  skipSuccessfulRequests: true
});

app.use("/api/", limiter);
app.use("/api/auth/", authLimiter);

// ‚úÖ Security Headers
app.use((req, res, next) => {
  res.setHeader("X-Content-Type-Options", "nosniff");
  res.setHeader("X-Frame-Options", "DENY");
  res.setHeader("X-XSS-Protection", "1; mode=block");
  res.setHeader("Referrer-Policy", "strict-origin-when-cross-origin");
  res.setHeader("Permissions-Policy", "geolocation=(), microphone=(), camera=()");
  next();
});

// ‚úÖ Input Validation Middleware
function validateBorrowerData(req, res, next) {
  const { firstName, lastName, birthDate, idCard, address, amount, frequency } = req.body;

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
  if (!firstName || !lastName || !birthDate || !idCard || !address || !amount || !frequency) {
    return res.status(400).json({ error: "Missing required fields" });
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô
  if (!/^\d{13}$/.test(idCard)) {
    return res.status(400).json({ error: "Invalid ID card number" });
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô
  const loanAmount = parseFloat(amount);
  if (isNaN(loanAmount) || loanAmount <= 0 || loanAmount > 50000) {
    return res.status(400).json({ error: "Invalid loan amount" });
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞
  if (!["daily", "weekly", "monthly"].includes(frequency)) {
    return res.status(400).json({ error: "Invalid payment frequency" });
  }

  next();
}

// ‚úÖ Admin Authentication Middleware
function authenticateAdmin(req, res, next) {
  const authHeader = req.headers.authorization;

  if (!authHeader || !authHeader.startsWith("Bearer ")) {
    return res.status(401).json({ error: "Authentication required" });
  }

  const token = authHeader.substring(7);

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö token (‡πÉ‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ token ‡∏á‡πà‡∏≤‡∏¢‡πÜ ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö demo)
  // ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á‡∏Ñ‡∏ß‡∏£‡πÉ‡∏ä‡πâ JWT ‡∏´‡∏£‡∏∑‡∏≠ Firebase Auth
  if (token !== process.env.ADMIN_TOKEN) {
    return res.status(403).json({ error: "Invalid token" });
  }

  next();
}

// ‚úÖ Logging Middleware
function logRequest(req, res, next) {
  const start = Date.now();

  res.on("finish", () => {
    const duration = Date.now() - start;
    console.log(`${req.method} ${req.url} - ${res.statusCode} - ${duration}ms`);
  });

  next();
}

app.use(logRequest);

app.post("/webhook", async (req, res) => {
  try {
    const events = req.body.events;
    console.log("üì© Received webhook events:", JSON.stringify(events, null, 2));

    await Promise.all(
      events.map(async (event) => {
        const userId = event.source.userId;
        console.log(`üì± Processing event for user: ${userId}, type: ${event.type}`);

        if (event.type === "follow") {
          console.log("üëã New follower, sending welcome message");
          await client.replyMessage(event.replyToken, {
            type: "flex",
            altText: "‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö",
            contents: welcomeFlex
          });
          return;
        }

        if (event.type === "message" && event.message.type === "text") {
          const text = event.message.text.trim();
          console.log(`üí¨ Received text message: "${text}"`);

          if (text === "‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô") {
            console.log("üéØ Handling register request");
            try {
              return client.replyMessage(event.replyToken, {
                type: "flex",
                altText: flexRegisterTemplate.altText,
                contents: flexRegisterTemplate
              });
            } catch (registerError) {
              console.error("‚ùå Register error:", registerError);
              return client.replyMessage(event.replyToken, {
                type: "text",
                text: "üìù ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ú‡∏π‡πâ‡∏Å‡∏π‡πâ‡πÄ‡∏á‡∏¥‡∏ô\n\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô ‡∏´‡∏£‡∏∑‡∏≠‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á"
              });
            }
          }

          if (text === "‡πÄ‡∏°‡∏ô‡∏π") {
            console.log("üéØ Handling menu request");
            try {
              console.log("menuFlex structure:", JSON.stringify(menuFlex, null, 2));
              return client.replyMessage(event.replyToken, {
                type: "flex",
                altText: menuFlex.altText,
                contents: menuFlex
              });
            } catch (menuError) {
              console.error("‚ùå Menu error:", menuError);
              return client.replyMessage(event.replyToken, {
                type: "text",
                text: "üì± ‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å\n\n1. ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô - ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏Å‡∏π‡πâ‡πÄ‡∏á‡∏¥‡∏ô\n2. ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞\n3. ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏ö‡∏±‡∏ï‡∏£ - ‡πÅ‡∏ô‡∏ö‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô"
              });
            }
          }

          // üîò ‡πÅ‡∏à‡πâ‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
          if (text === "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞") {
            const borrowerSnap = await db.collection("borrowers").where("userId", "==", userId).limit(1).get();

            if (!borrowerSnap.empty) {
              const b = borrowerSnap.docs[0].data();

              // üîÅ ‡πÅ‡∏õ‡∏•‡∏á dueDate ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô string ‡∏ó‡∏µ‡πà‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢
              const dueDateStr = b.dueDate?.toDate?.().toLocaleDateString("th-TH", {
                day: "numeric",
                month: "long",
                year: "numeric"
              }) || "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î";

              // ‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ä‡∏≥‡∏£‡∏∞
              const total = b.totalLoan + (b.totalLoan * b.interestRate);
              const formattedTotal = total.toLocaleString(undefined, { minimumFractionDigits: 2 });

              const statusFlex = {
                type: "flex",
                altText: "‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì",
                contents: {
                  type: "bubble",
                  header: {
                    type: "box",
                    layout: "vertical",
                    contents: [
                      {
                        type: "text",
                        text: "üìã ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏Å‡∏π‡πâ‡πÄ‡∏á‡∏¥‡∏ô",
                        weight: "bold",
                        size: "lg",
                        color: "#1DB446"
                      }
                    ]
                  },
                  body: {
                    type: "box",
                    layout: "vertical",
                    spacing: "md",
                    contents: [
                      {
                        type: "box",
                        layout: "baseline",
                        contents: [
                          { type: "text", text: "‡∏ä‡∏∑‡πà‡∏≠", size: "sm", color: "#aaaaaa", flex: 2 },
                          { type: "text", text: `${b.firstName} ${b.lastName}`, size: "sm", color: "#000000", flex: 5 }
                        ]
                      },
                      {
                        type: "box",
                        layout: "baseline",
                        contents: [
                          { type: "text", text: "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô", size: "sm", color: "#aaaaaa", flex: 2 },
                          { type: "text", text: `${b.totalLoan.toLocaleString()} ‡∏ö‡∏≤‡∏ó`, size: "sm", color: "#000000", flex: 5 }
                        ]
                      },
                      {
                        type: "box",
                        layout: "baseline",
                        contents: [
                          { type: "text", text: "‡∏î‡∏≠‡∏Å‡πÄ‡∏ö‡∏µ‡πâ‡∏¢", size: "sm", color: "#aaaaaa", flex: 2 },
                          { type: "text", text: `${(b.interestRate * 100).toFixed(2)}%`, size: "sm", color: "#000000", flex: 5 }
                        ]
                      },
                      {
                        type: "box",
                        layout: "baseline",
                        contents: [
                          { type: "text", text: "‡∏¢‡∏≠‡∏î‡∏ä‡∏≥‡∏£‡∏∞", size: "sm", color: "#aaaaaa", flex: 2 },
                          { type: "text", text: `${formattedTotal} ‡∏ö‡∏≤‡∏ó`, size: "sm", color: "#D91E18", flex: 5 }
                        ]
                      },
                      {
                        type: "box",
                        layout: "baseline",
                        contents: [
                          { type: "text", text: "‡∏Ñ‡∏£‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î", size: "sm", color: "#aaaaaa", flex: 2 },
                          { type: "text", text: dueDateStr, size: "sm", color: "#000000", flex: 5 }
                        ]
                      },
                      {
                        type: "box",
                        layout: "baseline",
                        contents: [
                          { type: "text", text: "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞", size: "sm", color: "#aaaaaa", flex: 2 },
                          { type: "text", text: `${b.status || "‡∏£‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥"}`, size: "sm", color: "#000000", flex: 5 }
                        ]
                      }
                    ]
                  },
                  footer: {
                    type: "box",
                    layout: "vertical",
                    spacing: "sm",
                    contents: [
                      {
                        type: "button",
                        style: "primary",
                        color: "#1DB446",
                        action: {
                          type: "uri",
                          label: "üì• ‡∏ä‡∏≥‡∏£‡∏∞‡∏ú‡πà‡∏≤‡∏ô PromptPay",
                          uri: `https://promptpay.io/0858294254/${total.toFixed(2)}`
                        }
                      },
                      {
                        type: "button",
                        style: "secondary",
                        action: {
                          type: "message",
                          label: "‡πÅ‡∏ô‡∏ö‡∏™‡∏•‡∏¥‡∏õ‡πÇ‡∏≠‡∏ô",
                          text: `‡∏ä‡∏≥‡∏£‡∏∞:${dueDateStr} ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô:${total.toFixed(2)}`
                        }
                      }
                    ]
                  }
                }
              };

              await client.replyMessage(event.replyToken, statusFlex);
            } else {
              await client.replyMessage(event.replyToken, {
                type: "text",
                text: "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏Ñ‡∏£‡∏±‡∏ö"
              });
            }
            return;
          }

          // ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏ö‡∏±‡∏ï‡∏£
          if (text === "‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏ö‡∏±‡∏ï‡∏£") {
            await client.replyMessage(event.replyToken, {
              type: "text",
              text: "üì∏ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡πà‡∏á‡∏£‡∏π‡∏õ‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏°‡∏≤‡πÉ‡∏ô‡πÅ‡∏ä‡∏ó‡∏ô‡∏µ‡πâ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö"
            });
            return;
          }

          // üîò ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÅ‡∏ö‡∏ö‡πÄ‡∏ï‡πá‡∏°
          if (
            text.includes("‡∏ä‡∏∑‡πà‡∏≠:") &&
                    text.includes("‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•:") &&
                    text.includes("‡πÄ‡∏Å‡∏¥‡∏î:") &&
                    text.includes("‡∏ö‡∏±‡∏ï‡∏£:") &&
                    text.includes("‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà:") &&
                    text.includes("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô:") &&
                    text.includes("‡πÅ‡∏ö‡∏ö:")
          ) {
            const data = extractFullData(text);
            if (!data) {
              await client.replyMessage(event.replyToken, {
                type: "text",
                text: "‚ö†Ô∏è ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏•‡∏≥‡∏î‡∏±‡∏ö‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á"
              });
              return;
            }

            const existing = await db.collection("borrowers").where("userId", "==", userId).limit(1).get();
            if (!existing.empty) {
              await client.replyMessage(event.replyToken, {
                type: "text",
                text: `‚ÑπÔ∏è ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏ß‡πâ‡πÅ‡∏•‡πâ‡∏ß`
              });
              return;
            }

            if (existing.empty) {
            // ‡∏ï‡∏£‡∏ß‡∏à‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£
              if (data.idCard.length !== 13 || !/^\d{13}$/.test(data.idCard)) {
                await client.replyMessage(event.replyToken, {
                  type: "text",
                  text: "‚õîÔ∏è ‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ 13 ‡∏´‡∏•‡∏±‡∏Å ‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô"
                });
                return;
              }

              if (!["daily", "weekly", "monthly"].includes(data.frequency)) {
                await client.replyMessage(event.replyToken, {
                  type: "text",
                  text: "‚ö†Ô∏è ‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏õ‡πá‡∏ô: ‡πÅ‡∏ö‡∏ö:‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô / ‡πÅ‡∏ö‡∏ö:‡∏£‡∏≤‡∏¢‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå / ‡πÅ‡∏ö‡∏ö:‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô"
                });
                return;
              }

              // ‚úÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏î‡∏≠‡∏Å‡πÄ‡∏ö‡∏µ‡πâ‡∏¢‡∏ï‡∏≤‡∏°‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö
              let interestRate = 0.10; // default monthly
              if (data.frequency === "daily") interestRate = 0.20;
              else if (data.frequency === "weekly") interestRate = 0.15;

              const today = new Date();
              const dueDate = new Date(today);
              if (data.frequency === "daily") {
                dueDate.setDate(today.getDate() + 1);
              } else if (data.frequency === "weekly") {
                dueDate.setDate(today.getDate() + 7);
              } else {
                dueDate.setMonth(today.getMonth() + 1);
              }


              await db.collection("borrowers").add({
                ...data,
                interestRate,
                dueDate: admin.firestore.Timestamp.fromDate(dueDate),
                paid: 0,
                status: "pending",
                userId,
                createdAt: admin.firestore.Timestamp.fromDate(today)
              });

              await client.replyMessage(event.replyToken, {
                type: "text",
                text: `‚úÖ ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏Ñ‡∏∏‡∏ì ${data.firstName} ${data.lastName}`
              });
              return;
            }
          }

          // üîò ‡πÅ‡∏ô‡∏ö‡∏™‡∏•‡∏¥‡∏õ
          if (text.includes("‡∏ä‡∏≥‡∏£‡∏∞:") && text.includes("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô:")) {
            const match = text.match(/‡∏ä‡∏≥‡∏£‡∏∞:(.*?)\s+‡∏à‡∏≥‡∏ô‡∏ß‡∏ô:(.*)/);
            if (match) {
              await db.collection("slips").add({
                userId,
                date: match[1].trim(),
                amount: parseFloat(match[2].trim()),
                createdAt: new Date(),
                status: "pending"
              });

              await client.replyMessage(event.replyToken, {
                type: "text",
                text: `üì∑ ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ä‡∏≥‡∏£‡∏∞‡πÅ‡∏•‡πâ‡∏ß ‡∏£‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö`
              });
              return;
            }
          }

          // ‡∏Å‡∏£‡∏ì‡∏µ‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
          await client.replyMessage(event.replyToken, {
            type: "text",
            text: "‚õîÔ∏è ‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå: ‡πÄ‡∏°‡∏ô‡∏π ‡∏´‡∏£‡∏∑‡∏≠ ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô"
          });
          return;
        }

        // üîò ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
        if (event.type === "message" && event.message.type === "image") {
          try {
            const messageId = event.message.id;
            const stream = await client.getMessageContent(messageId);

            const buffers = [];
            for await (const chunk of stream) {
              buffers.push(chunk);
            }

            const buffer = Buffer.concat(buffers);
            const filePath = `id-cards/${userId}_${Date.now()}.jpg`;
            const file = admin.storage().bucket().file(filePath);
            await file.save(buffer, { contentType: "image/jpeg" });
            await file.makePublic();
            const uploadUrl = `https://storage.googleapis.com/${file.bucket.name}/${file.name}`;

            await db.collection("images").add({
              userId,
              url: uploadUrl,
              createdAt: new Date()
            });

            // ‚úÖ ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏î‡πâ‡∏ß‡∏¢ Flex Message ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏†‡∏≤‡∏û
            const imageFlex = {
              type: "flex",
              altText: "üì∑ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
              contents: {
                type: "bubble",
                hero: {
                  type: "image",
                  url: uploadUrl,
                  size: "full",
                  aspectMode: "cover",
                  aspectRatio: "1:1"
                },
                body: {
                  type: "box",
                  layout: "vertical",
                  contents: [
                    {
                      type: "text",
                      text: "üì§ ‡∏£‡∏±‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß",
                      size: "lg",
                      weight: "bold"
                    },
                    {
                      type: "text",
                      text: "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 24 ‡∏ä‡∏°.",
                      size: "sm",
                      color: "#666666",
                      margin: "md"
                    }
                  ]
                },
                footer: {
                  type: "box",
                  layout: "vertical",
                  spacing: "sm",
                  contents: [
                    {
                      type: "button",
                      style: "primary",
                      color: "#1DB446",
                      action: {
                        type: "uri",
                        label: "üîç ‡∏î‡∏π‡∏£‡∏π‡∏õ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á",
                        uri: uploadUrl
                      }
                    }
                  ]
                }
              }
            };

            await client.replyMessage(event.replyToken, imageFlex);
          } catch (error) {
            console.error("‚ùå Error uploading image:", error);
            await client.replyMessage(event.replyToken, {
              type: "text",
              text: "‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û"
            });
          }
          return;
        }
      })
    );

    res.status(200).send("OK");
  } catch (error) {
    console.error("‚ùå Webhook error:", error);
    res.status(500).send("Internal Server Error");
  }
});

function extractFullData(text) {
  try {
    const patterns = {
      firstName: /‡∏ä‡∏∑‡πà‡∏≠:([^\n\r]*)/,
      lastName: /‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•:([^\n\r]*)/,
      birthDate: /‡πÄ‡∏Å‡∏¥‡∏î:([^\n\r]*)/,
      idCard: /‡∏ö‡∏±‡∏ï‡∏£:([^\n\r]*)/,
      address: /‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà:([^\n\r]*)/,
      amount: /‡∏à‡∏≥‡∏ô‡∏ß‡∏ô:([^\n\r]*)/,
      frequency: /‡πÅ‡∏ö‡∏ö:([^\n\r]*)/ // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
    };

    const data = {};
    for (const [key, pattern] of Object.entries(patterns)) {
      const match = text.match(pattern);
      if (!match || !match[1]) return null;
      data[key] = match[1].trim();
    }

    data.totalLoan = parseFloat(data.amount);
    delete data.amount;

    // ‚úÖ normalize frequency
    const freq = data.frequency.toLowerCase();
    if (["‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô", "daily"].includes(freq)) data.frequency = "daily";
    else if (["‡∏£‡∏≤‡∏¢‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå", "weekly"].includes(freq)) data.frequency = "weekly";
    else data.frequency = "monthly"; // default ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á

    return data;
  } catch (error) {
    console.error("‚ùå extractFullData error:", error);
    return null;
  }
}

// ‚úÖ Apply validation middleware to registration endpoint
app.post("/api/liff-register", validateBorrowerData, async (req, res) => {
  try {
    const {
      firstName,
      lastName,
      birthDate,
      idCard,
      address,
      addressOnId,
      currentAddress,
      amount,
      frequency,
      userId,
      idCardImage,
      idCardImageName,
      idCardImageSize
    } = req.body;

    // ‚úÖ validate
    if (!userId || !idCard || idCard.length !== 13) {
      return res
        .status(400)
        .json({ error: "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" });
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà
    const finalAddressOnId = addressOnId || address;
    const finalCurrentAddress = currentAddress || address;

    const today = new Date();
    const dueDate = new Date(today);

    const interestRate =
        frequency === "daily" ?
          0.2 :
          frequency === "weekly" ?
            0.15 :
            0.1;

    if (frequency === "daily") {
      dueDate.setDate(today.getDate() + 1);
    } else if (frequency === "weekly") {
      dueDate.setDate(today.getDate() + 7);
    } else {
      dueDate.setMonth(today.getMonth() + 1);
    }

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï
    const creditScore = DataManager.calculateCreditScore({
      firstName,
      lastName,
      birthDate,
      idCard,
      requestedAmount: parseFloat(amount)
    });

    // ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
    const borrowerData = {
      firstName,
      lastName,
      birthDate,
      idCard,
      address: finalAddressOnId, // ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ô‡πÑ‡∏î‡πâ
      addressOnId: finalAddressOnId,
      currentAddress: finalCurrentAddress,
      totalLoan: parseFloat(amount),
      requestedAmount: parseFloat(amount),
      frequency,
      interestRate,
      dueDate: admin.firestore.Timestamp.fromDate(dueDate),
      paid: 0,
      status: "pending",
      userId,
      creditScore,
      createdAt: admin.firestore.Timestamp.fromDate(today)
    };

    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏´‡∏≤‡∏Å‡∏°‡∏µ
    if (idCardImage) {
      borrowerData.idCardImage = idCardImage;
      borrowerData.idCardImageName = idCardImageName;
      borrowerData.idCardImageSize = idCardImageSize;
      borrowerData.hasIdCardImage = true;
    }

    // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Firebase
    const docRef = await db.collection("borrowers").add(borrowerData);

    // ‚úÖ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤ LINE
    await client.pushMessage(userId, {
      type: "text",
      text: `‚úÖ ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß

üìã ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö:
‚Ä¢ ‡∏ä‡∏∑‡πà‡∏≠: ${firstName} ${lastName}
‚Ä¢ ‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£: ${idCard}
‚Ä¢ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô: ${new Intl.NumberFormat('th-TH', { style: 'currency', currency: 'THB' }).format(amount)}
‚Ä¢ ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ä‡∏≥‡∏£‡∏∞: ${frequency === 'daily' ? '‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô' : frequency === 'weekly' ? '‡∏£‡∏≤‡∏¢‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå' : '‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô'}
‚Ä¢ ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï: ${creditScore}
${idCardImage ? '‚Ä¢ ‚úÖ ‡∏£‡∏π‡∏õ‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô: ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡πâ‡∏ß' : ''}

‚è≥ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤
üìä ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡πÅ‡∏à‡πâ‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á`
    });

    res.status(200).json({ 
      success: true, 
      message: "‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
      borrowerId: docRef.id,
      creditScore: creditScore
    });
  } catch (err) {
    console.error("‚ùå liff-register error", err);
    res.status(500).json({ error: "internal error" });
  }
});


app.post("/send-reminder", async (req, res) => {
  try {
    const today = new Date();
    const snapshot = await db.collection("borrowers")
      .where("status", "==", "approved")
      .get();

    const tasks = snapshot.docs.map(async (doc) => {
      const data = doc.data();
      const due = new Date(data.dueDate);
      const daysLate = Math.floor((today - due) / (1000 * 60 * 60 * 24));

      if (daysLate >= 0) {
        // ‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏î‡∏≠‡∏Å‡πÄ‡∏ö‡∏µ‡πâ‡∏¢
        const interest = daysLate * (data.dailyInterest || 10);
        const total = (data.outstanding || 0) + interest;

        // ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á QR PromptPay
        const qrUrl = `https://promptpay.io/0858294254/${total}`;

        // ‚úÖ ‡∏™‡πà‡∏á Flex ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
        await client.pushMessage(data.userId, {
          type: "flex",
          altText: "‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô",
          contents: {
            type: "bubble",
            hero: {
              type: "image",
              url: qrUrl,
              size: "full",
              aspectMode: "cover",
              aspectRatio: "1:1"
            },
            body: {
              type: "box",
              layout: "vertical",
              contents: [
                { type: "text", text: "üì¢ ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ä‡∏≥‡∏£‡∏∞‡∏´‡∏ô‡∏µ‡πâ", weight: "bold", size: "lg" },
                { type: "text", text: `‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°: ${total.toLocaleString()} ‡∏ö‡∏≤‡∏ó`, margin: "md", size: "md" },
                { type: "text", text: `‡∏î‡∏≠‡∏Å‡πÄ‡∏ö‡∏µ‡πâ‡∏¢‡∏Ñ‡πâ‡∏≤‡∏á ${daysLate} ‡∏ß‡∏±‡∏ô = ${interest} ‡∏ö‡∏≤‡∏ó`, size: "sm", color: "#999999" }
              ]
            },
            footer: {
              type: "box",
              layout: "vertical",
              contents: [
                {
                  type: "button",
                  style: "primary",
                  action: {
                    type: "uri",
                    label: "‡∏™‡πÅ‡∏Å‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ä‡∏≥‡∏£‡∏∞",
                    uri: qrUrl
                  },
                  color: "#1DB446"
                }
              ]
            }
          }
        });
      }
    });

    await Promise.all(tasks);
    res.send("üîî ‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Ñ‡∏£‡∏ö‡πÅ‡∏•‡πâ‡∏ß");
  } catch (e) {
    console.error("‚ùå send-reminder error:", e);
    res.status(500).send("‚ùå ERROR");
  }
});


app.post("/check-due", async (req, res) => {
  const today = new Date();
  const todayStr = today.toISOString().split("T")[0];

  const snap = await db.collection("borrowers")
    .where("status", "==", "approved")
    .get();

  const reminders = [];

  for (const doc of snap.docs) {
    const data = doc.data();
    const due = data.dueDate.toDate();
    const dueStr = due.toISOString().split("T")[0];

    if (dueStr === todayStr) {
      reminders.push(
        client.pushMessage(data.userId, {
          type: "flex",
          altText: "‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ß‡∏±‡∏ô‡∏Ñ‡∏£‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î",
          contents: {
            type: "bubble",
            body: {
              type: "box",
              layout: "vertical",
              contents: [
                { type: "text", text: "‚è∞ ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Ñ‡∏£‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î", weight: "bold", size: "lg" },
                { type: "text", text: `‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏£‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ`, size: "md", margin: "md" },
                { type: "text", text: `‡∏¢‡∏≠‡∏î: ${data.totalLoan + (data.totalLoan * data.interestRate)} ‡∏ö‡∏≤‡∏ó`, size: "sm", color: "#ff0000", margin: "sm" }
              ]
            },
            footer: {
              type: "box",
              layout: "vertical",
              contents: [
                {
                  type: "button",
                  style: "primary",
                  action: {
                    type: "uri",
                    label: "‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏ú‡πà‡∏≤‡∏ô QR",
                    uri: `https://promptpay.io/0858294254/${data.totalLoan + (data.totalLoan * data.interestRate)}`
                  },
                  color: "#1DB446"
                }
              ]
            }
          }
        })
      );
    }
  }

  await Promise.all(reminders);
  res.send("‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß");
});


app.get("/api/admin/borrowers", async (req, res) => {
  const snap = await db.collection("borrowers").orderBy("createdAt", "desc").get();
  res.json(snap.docs.map((doc) => ({ id: doc.id, ...doc.data() })));
});

app.get("/api/admin/slips", async (req, res) => {
  const snap = await db.collection("slips").orderBy("createdAt", "desc").get();
  res.json(snap.docs.map((doc) => ({ id: doc.id, ...doc.data() })));
});

app.get("/api/admin/images", async (req, res) => {
  const snap = await db.collection("images").orderBy("createdAt", "desc").get();
  res.json(snap.docs.map((doc) => ({ id: doc.id, ...doc.data() })));
});


// ‚úÖ API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏´‡∏£‡∏∑‡∏≠‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏Å‡∏≤‡∏£‡∏Å‡∏π‡πâ
app.post("/api/admin/approve", async (req, res) => {
  const { borrowerId, action } = req.body; // action: "approve" ‡∏´‡∏£‡∏∑‡∏≠ "reject"
  try {
    const borrowerRef = db.collection("borrowers").doc(borrowerId);
    const borrowerSnap = await borrowerRef.get();

    if (!borrowerSnap.exists) return res.status(404).json({ error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡∏Å‡∏π‡πâ" });

    const borrower = borrowerSnap.data();

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
    const newStatus = action === "approve" ? "approved" : "rejected";
    const updateFields = { status: newStatus };
    if (action === "approve") {
      updateFields.approvedAt = admin.firestore.Timestamp.now();
    }
    await borrowerRef.update(updateFields);

    // ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏≤ user
    await client.pushMessage(borrower.userId, {
      type: "flex",
      altText: "‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥",
      contents: {
        type: "bubble",
        body: {
          type: "box",
          layout: "vertical",
          spacing: "md",
          contents: [
            {
              type: "text",
              text: action === "approve" ? "‚úÖ ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" : "‚ùå ‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥",
              size: "lg",
              weight: "bold",
              color: action === "approve" ? "#1DB446" : "#D70000"
            },
            {
              type: "text",
              text: action === "approve" ?
                "‡πÄ‡∏á‡∏¥‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏à‡∏∞‡πÇ‡∏≠‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á" :
                "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÉ‡∏´‡∏°‡πà",
              wrap: true,
              size: "sm"
            }
          ]
        }
      }
    });

    res.json({ success: true, status: newStatus });
  } catch (e) {
    console.error("‚ùå Error in approve API:", e);
    res.status(500).json({ error: "internal error" });
  }
});

// ‚úÖ API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á
app.post("/api/admin/generate-report", async (req, res) => {
  try {
    const { startDate, endDate } = req.body;
    const report = await DataManager.generateAdvancedReport(startDate, endDate);
    res.json(report);
  } catch (error) {
    console.error("‚ùå Error generating report:", error);
    res.status(500).json({ error: "Failed to generate report" });
  }
});

// ‚úÖ API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Credit Score
app.post("/api/admin/credit-score", async (req, res) => {
  try {
    const { borrowerId } = req.body;
    const borrowerDoc = await db.collection("borrowers").doc(borrowerId).get();

    if (!borrowerDoc.exists) {
      return res.status(404).json({ error: "Borrower not found" });
    }

    const borrowerData = borrowerDoc.data();
    const creditScore = DataManager.calculateCreditScore(borrowerData);
    const blacklistCheck = await DataManager.checkBlacklist(borrowerData.idCard);

    res.json({
      creditScore,
      blacklistStatus: blacklistCheck,
      autoApprove: DataManager.shouldAutoApprove(borrowerData)
    });
  } catch (error) {
    console.error("‚ùå Error calculating credit score:", error);
    res.status(500).json({ error: "Failed to calculate credit score" });
  }
});

// ‚úÖ API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Blacklist
app.post("/api/admin/blacklist", async (req, res) => {
  try {
    const { borrowerId, reason, action } = req.body;

    if (action === "add") {
      const borrowerDoc = await db.collection("borrowers").doc(borrowerId).get();
      if (!borrowerDoc.exists) {
        return res.status(404).json({ error: "Borrower not found" });
      }

      const success = await DataManager.addToBlacklist(borrowerDoc.data(), reason);
      res.json({ success });
    } else if (action === "remove") {
      const borrowerDoc = await db.collection("borrowers").doc(borrowerId).get();
      if (!borrowerDoc.exists) {
        return res.status(404).json({ error: "Borrower not found" });
      }

      const borrowerData = borrowerDoc.data();
      await db.collection("blacklist").where("idCard", "==", borrowerData.idCard).get()
        .then((snapshot) => {
          const batch = db.batch();
          snapshot.docs.forEach((doc) => {
            batch.delete(doc.ref);
          });
          return batch.commit();
        });

      res.json({ success: true });
    }
  } catch (error) {
    console.error("‚ùå Error managing blacklist:", error);
    res.status(500).json({ error: "Failed to manage blacklist" });
  }
});

// ‚úÖ API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏ö‡∏ö‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô
app.post("/api/admin/send-reminder", async (req, res) => {
  try {
    const { borrowerId, level } = req.body;
    const borrowerDoc = await db.collection("borrowers").doc(borrowerId).get();

    if (!borrowerDoc.exists) {
      return res.status(404).json({ error: "Borrower not found" });
    }

    const borrowerData = { id: borrowerId, ...borrowerDoc.data() };
    const success = await DataManager.sendEscalatedReminder(borrowerData, level);

    res.json({ success });
  } catch (error) {
    console.error("‚ùå Error sending reminder:", error);
    res.status(500).json({ error: "Failed to send reminder" });
  }
});

// ‚úÖ API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏î‡∏≠‡∏Å‡πÄ‡∏ö‡∏µ‡πâ‡∏¢‡∏Ñ‡πâ‡∏≤‡∏á
app.get("/api/admin/calculate-overdue/:borrowerId", async (req, res) => {
  try {
    const { borrowerId } = req.params;
    const borrowerDoc = await db.collection("borrowers").doc(borrowerId).get();

    if (!borrowerDoc.exists) {
      return res.status(404).json({ error: "Borrower not found" });
    }

    const borrowerData = borrowerDoc.data();
    const overdueInfo = DataManager.calculateOverdueInterest(borrowerData);

    res.json(overdueInfo);
  } catch (error) {
    console.error("‚ùå Error calculating overdue:", error);
    res.status(500).json({ error: "Failed to calculate overdue interest" });
  }
});

// ‚úÖ API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥ Dashboard
app.get("/api/admin/dashboard-stats", async (req, res) => {
  try {
    const today = new Date();
    const startOfMonth = new Date(today.getFullYear(), today.getMonth(), 1);

    // ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
    const totalBorrowersSnap = await db.collection("borrowers").get();
    const pendingBorrowersSnap = await db.collection("borrowers").where("status", "==", "pending").get();
    const approvedBorrowersSnap = await db.collection("borrowers").where("status", "==", "approved").get();

    // ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
    const monthlyBorrowersSnap = await db.collection("borrowers")
      .where("createdAt", ">=", startOfMonth)
      .get();

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô
    let totalLoanAmount = 0;
    let totalOutstanding = 0;

    totalBorrowersSnap.forEach((doc) => {
      const data = doc.data();
      totalLoanAmount += data.totalLoan || 0;

      if (data.status === "approved") {
        totalOutstanding += (data.totalLoan || 0) + ((data.totalLoan || 0) * (data.interestRate || 0));
      }
    });

    // ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
    const paidSlipsSnap = await db.collection("slips").where("status", "==", "approved").get();
    let totalPaidAmount = 0;
    paidSlipsSnap.forEach((doc) => {
      totalPaidAmount += doc.data().amount || 0;
    });

    // ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏Ñ‡πâ‡∏≤‡∏á‡∏ä‡∏≥‡∏£‡∏∞
    let overdueCount = 0;
    approvedBorrowersSnap.forEach((doc) => {
      const data = doc.data();
      const dueDate = data.dueDate?.toDate?.() || new Date();
      if (today > dueDate) {
        overdueCount++;
      }
    });

    res.json({
      totalBorrowers: totalBorrowersSnap.size,
      pendingBorrowers: pendingBorrowersSnap.size,
      approvedBorrowers: approvedBorrowersSnap.size,
      monthlyNewBorrowers: monthlyBorrowersSnap.size,
      totalLoanAmount,
      totalOutstanding,
      totalPaidAmount,
      overdueCount,
      collectionRate: totalLoanAmount > 0 ? ((totalPaidAmount / totalLoanAmount) * 100).toFixed(2) : 0
    });
  } catch (error) {
    console.error("‚ùå Error fetching dashboard stats:", error);
    res.status(500).json({ error: "Failed to fetch dashboard stats" });
  }
});

// ‚úÖ API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°
app.post("/api/admin/bulk-notify", async (req, res) => {
  try {
    const { message, targetGroup } = req.body; // targetGroup: "all", "pending", "overdue"

    let query = db.collection("borrowers");

    switch (targetGroup) {
    case "pending":
      query = query.where("status", "==", "pending");
      break;
    case "overdue":
      query = query.where("status", "==", "approved");
      break;
            // "all" ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏° where clause
    }

    const snapshot = await query.get();
    const tasks = [];

    snapshot.forEach((doc) => {
      const data = doc.data();

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç overdue
      if (targetGroup === "overdue") {
        const dueDate = data.dueDate?.toDate?.() || new Date();
        if (new Date() <= dueDate) return; // skip ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏Ñ‡πâ‡∏≤‡∏á
      }

      tasks.push(
        client.pushMessage(data.userId, {
          type: "text",
          text: message
        })
      );
    });

    await Promise.all(tasks);
    res.json({ success: true, messagesSent: tasks.length });
  } catch (error) {
    console.error("‚ùå Error sending bulk notification:", error);
    res.status(500).json({ error: "Failed to send bulk notification" });
  }
});

// Add a simple health check endpoint
app.get("/", (req, res) => {
  res.json({
    status: "OK",
    message: "BaanTK LINE Bot API is running",
    timestamp: new Date().toISOString()
  });
});

// Add a simple test endpoint
app.get("/test", (req, res) => {
  res.json({
    status: "OK",
    message: "Test endpoint working"
  });
});

exports.webhook = functions.https.onRequest(app);
