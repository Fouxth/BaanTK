// functions/scheduler/index.js
const { onSchedule } = require("firebase-functions/v2/scheduler");
const { initializeApp, cert, getApps } = require("firebase-admin/app");
const { getFirestore } = require("firebase-admin/firestore");
const { Client } = require("@line/bot-sdk");

// Initialize Firebase if not already done
if (!getApps().length) {
  initializeApp({
    credential: cert({
      projectId: process.env.GOOGLE_PROJECT_ID,
      clientEmail: process.env.GOOGLE_CLIENT_EMAIL,
      privateKey: process.env.GOOGLE_PRIVATE_KEY.replace(/\\n/g, "\n")
    })
  });
}

const db = getFirestore();
const client = new Client({
  channelAccessToken: process.env.CHANNEL_ACCESS_TOKEN,
  channelSecret: process.env.CHANNEL_SECRET
});

// ‚úÖ ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ß‡∏±‡∏ô‡∏Ñ‡∏£‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ä‡∏≥‡∏£‡∏∞
exports.dailyDueReminder = onSchedule("0 9 * * *", async (event) => {
  console.log("üîî Running daily due reminder...");

  const today = new Date();
  const snapshot = await db.collection("borrowers")
    .where("status", "==", "approved")
    .get();

  const tasks = [];

  snapshot.forEach((doc) => {
    const data = doc.data();
    const dueDate = data.dueDate?.toDate?.() || new Date();
    const diffTime = Math.floor((dueDate - today) / (1000 * 60 * 60 * 24));

    // ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô 1 ‡∏ß‡∏±‡∏ô ‡∏Å‡πà‡∏≠‡∏ô‡∏Ñ‡∏£‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î ‡πÅ‡∏•‡∏∞‡∏ß‡∏±‡∏ô‡∏Ñ‡∏£‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î
    if (diffTime <= 1 && diffTime >= 0) {
      const interest = data.totalLoan * data.interestRate;
      const totalDue = data.totalLoan + interest;

      const message = {
        type: "flex",
        altText: "‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Ñ‡∏£‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ä‡∏≥‡∏£‡∏∞",
        contents: {
          type: "bubble",
          hero: {
            type: "image",
            url: `https://promptpay.io/0858294254/${totalDue.toFixed(2)}`,
            size: "full",
            aspectRatio: "1:1",
            aspectMode: "cover"
          },
          body: {
            type: "box",
            layout: "vertical",
            contents: [
              {
                type: "text",
                text: diffTime === 0 ? "üì¢ ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏Ñ‡∏£‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ä‡∏≥‡∏£‡∏∞!" : "‚è∞ ‡∏û‡∏£‡∏∏‡πà‡∏á‡∏ô‡∏µ‡πâ‡∏Ñ‡∏£‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ä‡∏≥‡∏£‡∏∞",
                weight: "bold",
                size: "lg",
                color: diffTime === 0 ? "#DC2626" : "#F59E0B"
              },
              { type: "text", text: `‡∏Ñ‡∏∏‡∏ì ${data.firstName} ${data.lastName}` },
              { type: "text", text: `‡∏¢‡∏≠‡∏î‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ä‡∏≥‡∏£‡∏∞: ${totalDue.toFixed(2)} ‡∏ö‡∏≤‡∏ó`, color: "#DC2626", weight: "bold" },
              { type: "text", text: `‡∏Ñ‡∏£‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: ${dueDate.toLocaleDateString("th-TH")}` }
            ]
          },
          footer: {
            type: "box",
            layout: "vertical",
            contents: [
              {
                type: "button",
                style: "primary",
                action: {
                  type: "uri",
                  label: "üí≥ ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏±‡∏ô‡∏ó‡∏µ",
                  uri: `https://promptpay.io/0858294254/${totalDue.toFixed(2)}`
                },
                color: "#1DB446"
              }
            ]
          }
        }
      };

      tasks.push(client.pushMessage(data.userId, message));
    }
  });

  await Promise.all(tasks);
  console.log(`‚úÖ Sent ${tasks.length} due reminders`);
});

// ‚úÖ ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏≤‡∏á‡∏ä‡∏≥‡∏£‡∏∞
exports.overdueReminder = onSchedule("0 10 * * *", async (event) => {
  console.log("üö® Running overdue reminder...");

  const today = new Date();
  const snapshot = await db.collection("borrowers")
    .where("status", "==", "approved")
    .get();

  const tasks = [];

  snapshot.forEach((doc) => {
    const data = doc.data();
    const dueDate = data.dueDate?.toDate?.() || new Date();
    const overdueDays = Math.floor((today - dueDate) / (1000 * 60 * 60 * 24));

    // ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏Ñ‡πâ‡∏≤‡∏á‡∏ä‡∏≥‡∏£‡∏∞ (1, 3, 7, 14, 30 ‡∏ß‡∏±‡∏ô)
    if ([1, 3, 7, 14, 30].includes(overdueDays)) {
      const baseAmount = data.totalLoan + (data.totalLoan * data.interestRate);
      const penaltyRate = 0.05; // ‡∏Ñ‡πà‡∏≤‡∏õ‡∏£‡∏±‡∏ö 5% ‡∏ï‡πà‡∏≠‡∏ß‡∏±‡∏ô
      const penalty = baseAmount * penaltyRate * overdueDays;
      const totalOwed = baseAmount + penalty;

      const urgencyLevel = overdueDays <= 3 ? "‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô" : overdueDays <= 14 ? "‡πÄ‡∏£‡πà‡∏á‡∏î‡πà‡∏ß‡∏ô" : "‡∏î‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î";
      const urgencyColor = overdueDays <= 3 ? "#F59E0B" : overdueDays <= 14 ? "#EF4444" : "#991B1B";

      const message = {
        type: "flex",
        altText: `${urgencyLevel}: ‡∏Ñ‡πâ‡∏≤‡∏á‡∏ä‡∏≥‡∏£‡∏∞ ${overdueDays} ‡∏ß‡∏±‡∏ô`,
        contents: {
          type: "bubble",
          body: {
            type: "box",
            layout: "vertical",
            contents: [
              {
                type: "text",
                text: `üö® ${urgencyLevel}: ‡∏Ñ‡πâ‡∏≤‡∏á‡∏ä‡∏≥‡∏£‡∏∞ ${overdueDays} ‡∏ß‡∏±‡∏ô`,
                weight: "bold",
                size: "lg",
                color: urgencyColor
              },
              { type: "text", text: `‡∏Ñ‡∏∏‡∏ì ${data.firstName} ${data.lastName}` },
              { type: "text", text: `‡∏¢‡∏≠‡∏î‡πÄ‡∏î‡∏¥‡∏°: ${baseAmount.toFixed(2)} ‡∏ö‡∏≤‡∏ó` },
              { type: "text", text: `‡∏Ñ‡πà‡∏≤‡∏õ‡∏£‡∏±‡∏ö: ${penalty.toFixed(2)} ‡∏ö‡∏≤‡∏ó`, color: "#DC2626" },
              { type: "text", text: `‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏¥‡πâ‡∏ô: ${totalOwed.toFixed(2)} ‡∏ö‡∏≤‡∏ó`, weight: "bold", color: "#DC2626" },
              { type: "text", text: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ä‡∏≥‡∏£‡∏∞‡πÇ‡∏î‡∏¢‡∏î‡πà‡∏ß‡∏ô ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≤‡∏á‡∏Å‡∏é‡∏´‡∏°‡∏≤‡∏¢", wrap: true, size: "sm", color: "#666666" }
            ]
          },
          footer: {
            type: "box",
            layout: "vertical",
            contents: [
              {
                type: "button",
                style: "primary",
                action: {
                  type: "uri",
                  label: "üí≥ ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô",
                  uri: `https://promptpay.io/0858294254/${totalOwed.toFixed(2)}`
                },
                color: urgencyColor
              },
              {
                type: "button",
                style: "link",
                action: {
                  type: "uri",
                  label: "üìû ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà",
                  uri: "tel:0858294254"
                }
              }
            ]
          }
        }
      };

      tasks.push(client.pushMessage(data.userId, message));
    }
  });

  await Promise.all(tasks);
  console.log(`üö® Sent ${tasks.length} overdue reminders`);
});

// ‚úÖ ‡∏™‡∏£‡∏∏‡∏õ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô‡πÉ‡∏´‡πâ‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô
exports.dailyReport = onSchedule("0 18 * * *", async (event) => {
  console.log("üìä Generating daily report...");

  const today = new Date();
  const startOfDay = new Date(today.getFullYear(), today.getMonth(), today.getDate());
  const endOfDay = new Date(startOfDay.getTime() + 24 * 60 * 60 * 1000);

  // ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÉ‡∏´‡∏°‡πà‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ
  const newBorrowersSnap = await db.collection("borrowers")
    .where("createdAt", ">=", startOfDay)
    .where("createdAt", "<", endOfDay)
    .get();

  // ‡∏™‡∏•‡∏¥‡∏õ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ
  const newSlipsSnap = await db.collection("slips")
    .where("createdAt", ">=", startOfDay)
    .where("createdAt", "<", endOfDay)
    .get();

  // ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏Ñ‡πâ‡∏≤‡∏á‡∏ä‡∏≥‡∏£‡∏∞
  const overdueSnap = await db.collection("borrowers")
    .where("status", "==", "approved")
    .get();

  let overdueCount = 0;
  let overdueAmount = 0;

  overdueSnap.forEach((doc) => {
    const data = doc.data();
    const dueDate = data.dueDate?.toDate?.() || new Date();
    if (today > dueDate) {
      overdueCount++;
      overdueAmount += (data.totalLoan + (data.totalLoan * data.interestRate));
    }
  });

  const reportText = `üìä ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô ${today.toLocaleDateString("th-TH")}

üÜï ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà: ${newBorrowersSnap.size} ‡∏£‡∏≤‡∏¢
üìÑ ‡∏™‡∏•‡∏¥‡∏õ‡πÉ‡∏´‡∏°‡πà: ${newSlipsSnap.size} ‡πÉ‡∏ö
‚ö†Ô∏è ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏Ñ‡πâ‡∏≤‡∏á‡∏ä‡∏≥‡∏£‡∏∞: ${overdueCount} ‡∏£‡∏≤‡∏¢
üí∞ ‡∏¢‡∏≠‡∏î‡∏Ñ‡πâ‡∏≤‡∏á‡∏£‡∏ß‡∏°: ${overdueAmount.toLocaleString()} ‡∏ö‡∏≤‡∏ó

#BaanTK #DailyReport`;

  // ‡∏™‡πà‡∏á‡πÉ‡∏´‡πâ‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô (‡πÉ‡∏™‡πà User ID ‡∏Ç‡∏≠‡∏á‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô)
  const adminUserId = "ADMIN_USER_ID"; // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô User ID ‡∏à‡∏£‡∏¥‡∏á‡∏Ç‡∏≠‡∏á‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô

  try {
    await client.pushMessage(adminUserId, {
      type: "text",
      text: reportText
    });
    console.log("‚úÖ Daily report sent to admin");
  } catch (error) {
    console.error("‚ùå Failed to send daily report:", error);
  }
});

module.exports = {
  dailyDueReminder: exports.dailyDueReminder,
  overdueReminder: exports.overdueReminder,
  dailyReport: exports.dailyReport
};
