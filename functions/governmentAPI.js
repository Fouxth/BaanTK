// Government API Integration Module
// ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö API ‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô

const axios = require('axios');
const admin = require('firebase-admin');

class GovernmentAPIService {
  constructor() {
    // Government API configurations
    this.dopa_api_key = process.env.DOPA_API_KEY; // API Key ‡∏Ç‡∏≠‡∏á‡∏Å‡∏£‡∏°‡∏Å‡∏≤‡∏£‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á
    this.dopa_base_url = process.env.DOPA_BASE_URL || 'https://dopa.go.th/api/v1';
    
    // Alternative Government APIs
    this.nso_api_key = process.env.NSO_API_KEY; // ‡∏™‡∏≥‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÅ‡∏´‡πà‡∏á‡∏ä‡∏≤‡∏ï‡∏¥
    this.nso_base_url = process.env.NSO_BASE_URL || 'https://nso.go.th/api/v1';
    
    // Ministry of Digital Economy and Society APIs
    this.mdes_api_key = process.env.MDES_API_KEY;
    this.mdes_base_url = process.env.MDES_BASE_URL || 'https://mdes.go.th/api/v1';
    
    // Timeout configuration
    this.api_timeout = parseInt(process.env.GOV_API_TIMEOUT) || 10000;
    
    // Rate limiting
    this.rate_limit = {
      requests_per_minute: 60,
      requests_per_hour: 1000
    };
  }

  /**
   * ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô‡∏à‡∏≤‡∏Å API ‡∏Å‡∏£‡∏°‡∏Å‡∏≤‡∏£‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á
   * @param {string} idCard - ‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô 13 ‡∏´‡∏•‡∏±‡∏Å
   * @returns {Object} ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô
   */
  async getCitizenDataFromDOPA(idCard) {
    try {
      console.log(`üèõÔ∏è Fetching citizen data from DOPA for ID: ${idCard}`);
      
      // Validate ID card format
      if (!this.validateThaiIDCard(idCard)) {
        throw new Error('Invalid Thai ID card format');
      }

      const response = await axios({
        method: 'POST',
        url: `${this.dopa_base_url}/citizen/verify`,
        headers: {
          'Authorization': `Bearer ${this.dopa_api_key}`,
          'Content-Type': 'application/json',
          'X-Request-ID': this.generateRequestId()
        },
        data: {
          id_card: idCard,
          request_type: 'full_profile',
          include_address: true,
          include_family: false // ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß
        },
        timeout: this.api_timeout
      });

      if (response.data.status === 'success' && response.data.data) {
        const citizenData = this.formatDOPAResponse(response.data.data);
        
        // Log successful retrieval
        await this.logAPIUsage('DOPA', 'citizen_verify', 'success', {
          idCard: this.maskIDCard(idCard),
          responseTime: response.headers['x-response-time']
        });

        return {
          success: true,
          source: 'DOPA',
          data: citizenData,
          timestamp: new Date().toISOString()
        };
      }

      throw new Error('No data found or invalid response from DOPA');

    } catch (error) {
      console.error('‚ùå Error fetching data from DOPA:', error.message);
      
      // Log failed attempt
      await this.logAPIUsage('DOPA', 'citizen_verify', 'error', {
        idCard: this.maskIDCard(idCard),
        error: error.message
      });

      return {
        success: false,
        source: 'DOPA',
        error: error.message,
        timestamp: new Date().toISOString()
      };
    }
  }

  /**
   * ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏£‡∏≤‡∏©‡∏é‡∏£‡πå‡∏ú‡πà‡∏≤‡∏ô NSO API
   * @param {string} idCard - ‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô
   * @returns {Object} ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏£‡∏≤‡∏©‡∏é‡∏£‡πå
   */
  async getCitizenDataFromNSO(idCard) {
    try {
      console.log(`üìä Fetching citizen data from NSO for ID: ${idCard}`);

      const response = await axios({
        method: 'GET',
        url: `${this.nso_base_url}/population/citizen/${idCard}`,
        headers: {
          'Authorization': `API-Key ${this.nso_api_key}`,
          'Accept': 'application/json'
        },
        timeout: this.api_timeout
      });

      if (response.data.success && response.data.citizen) {
        const citizenData = this.formatNSOResponse(response.data.citizen);
        
        await this.logAPIUsage('NSO', 'population_lookup', 'success', {
          idCard: this.maskIDCard(idCard)
        });

        return {
          success: true,
          source: 'NSO',
          data: citizenData,
          timestamp: new Date().toISOString()
        };
      }

      throw new Error('Citizen not found in NSO database');

    } catch (error) {
      console.error('‚ùå Error fetching data from NSO:', error.message);
      
      await this.logAPIUsage('NSO', 'population_lookup', 'error', {
        idCard: this.maskIDCard(idCard),
        error: error.message
      });

      return {
        success: false,
        source: 'NSO',
        error: error.message,
        timestamp: new Date().toISOString()
      };
    }
  }

  /**
   * ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢‡πÅ‡∏´‡∏•‡πà‡∏á‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô (Fallback strategy)
   * @param {string} idCard - ‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô
   * @returns {Object} ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏ß‡∏°
   */
  async getCitizenDataMultiSource(idCard) {
    try {
      console.log(`üîÑ Multi-source citizen data lookup for ID: ${idCard}`);

      // ‡∏•‡∏≠‡∏á‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å DOPA ‡∏Å‡πà‡∏≠‡∏ô (Primary source)
      const dopaResult = await this.getCitizenDataFromDOPA(idCard);
      
      if (dopaResult.success) {
        console.log('‚úÖ Successfully retrieved data from DOPA');
        return dopaResult;
      }

      // ‡∏ñ‡πâ‡∏≤ DOPA ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏•‡∏≠‡∏á‡∏à‡∏≤‡∏Å NSO (Fallback)
      console.log('‚ö†Ô∏è DOPA failed, trying NSO...');
      const nsoResult = await this.getCitizenDataFromNSO(idCard);
      
      if (nsoResult.success) {
        console.log('‚úÖ Successfully retrieved data from NSO');
        return nsoResult;
      }

      // ‡∏ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
      console.log('‚ùå All government APIs failed');
      return {
        success: false,
        error: 'Unable to retrieve citizen data from any government source',
        sources_tried: ['DOPA', 'NSO'],
        timestamp: new Date().toISOString()
      };

    } catch (error) {
      console.error('‚ùå Error in multi-source lookup:', error);
      return {
        success: false,
        error: error.message,
        timestamp: new Date().toISOString()
      };
    }
  }

  /**
   * ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å DOPA API
   * @param {Object} dopaData - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å DOPA
   * @returns {Object} ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß
   */
  formatDOPAResponse(dopaData) {
    return {
      idCard: dopaData.citizen_id,
      titleThai: dopaData.title_th || '',
      titleEnglish: dopaData.title_en || '',
      firstNameThai: dopaData.first_name_th || '',
      firstNameEnglish: dopaData.first_name_en || '',
      lastNameThai: dopaData.last_name_th || '',
      lastNameEnglish: dopaData.last_name_en || '',
      birthDate: this.formatDate(dopaData.birth_date),
      gender: dopaData.gender,
      nationality: dopaData.nationality || 'Thai',
      religion: dopaData.religion || '',
      
      // ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏ï‡∏≤‡∏°‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ö‡πâ‡∏≤‡∏ô
      address: {
        houseNumber: dopaData.address?.house_no || '',
        village: dopaData.address?.village || '',
        lane: dopaData.address?.lane || '',
        road: dopaData.address?.road || '',
        subDistrict: dopaData.address?.sub_district || '',
        district: dopaData.address?.district || '',
        province: dopaData.address?.province || '',
        postalCode: dopaData.address?.postal_code || '',
        fullAddress: dopaData.address?.full_address || ''
      },

      // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ö‡∏±‡∏ï‡∏£
      cardStatus: {
        isActive: dopaData.card_status === 'active',
        expiryDate: this.formatDate(dopaData.card_expiry),
        issueDate: this.formatDate(dopaData.card_issue_date)
      },

      // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
      maritalStatus: dopaData.marital_status || '',
      occupation: dopaData.occupation || '',
      education: dopaData.education_level || '',
      
      // Metadata
      lastUpdated: dopaData.last_updated,
      dataSource: 'DOPA',
      verificationLevel: 'GOVERNMENT_VERIFIED'
    };
  }

  /**
   * ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å NSO API
   * @param {Object} nsoData - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å NSO
   * @returns {Object} ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß
   */
  formatNSOResponse(nsoData) {
    return {
      idCard: nsoData.id_number,
      firstNameThai: nsoData.name_th?.first || '',
      lastNameThai: nsoData.name_th?.last || '',
      firstNameEnglish: nsoData.name_en?.first || '',
      lastNameEnglish: nsoData.name_en?.last || '',
      birthDate: this.formatDate(nsoData.birth_date),
      gender: nsoData.gender,
      
      // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏≤‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
      statisticalData: {
        householdId: nsoData.household_id,
        familySize: nsoData.family_size,
        incomeRange: nsoData.income_range,
        educationLevel: nsoData.education
      },

      address: {
        province: nsoData.address?.province || '',
        district: nsoData.address?.district || '',
        subDistrict: nsoData.address?.sub_district || '',
        postalCode: nsoData.address?.postal_code || ''
      },

      dataSource: 'NSO',
      verificationLevel: 'STATISTICAL_VERIFIED'
    };
  }

  /**
   * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô
   * @param {string} idCard - ‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô
   * @returns {boolean} ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
   */
  validateThaiIDCard(idCard) {
    if (!idCard || idCard.length !== 13) return false;
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    if (!/^\d{13}$/.test(idCard)) return false;
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö checksum
    let sum = 0;
    for (let i = 0; i < 12; i++) {
      sum += parseInt(idCard[i]) * (13 - i);
    }
    
    const checkDigit = (11 - (sum % 11)) % 10;
    return checkDigit === parseInt(idCard[12]);
  }

  /**
   * ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
   * @param {string} dateString - ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ï‡πà‡∏≤‡∏á‡πÜ
   * @returns {string} ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö DD/MM/YYYY
   */
  formatDate(dateString) {
    if (!dateString) return '';
    
    try {
      const date = new Date(dateString);
      const day = date.getDate().toString().padStart(2, '0');
      const month = (date.getMonth() + 1).toString().padStart(2, '0');
      const year = date.getFullYear();
      
      return `${day}/${month}/${year}`;
    } catch (error) {
      console.warn('‚ö†Ô∏è Invalid date format:', dateString);
      return dateString;
    }
  }

  /**
   * ‡∏ã‡πà‡∏≠‡∏ô‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
   * @param {string} idCard - ‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô
   * @returns {string} ‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏ó‡∏µ‡πà‡∏ã‡πà‡∏≠‡∏ô‡πÅ‡∏•‡πâ‡∏ß
   */
  maskIDCard(idCard) {
    if (!idCard || idCard.length !== 13) return 'INVALID_ID';
    return `${idCard.substr(0, 4)}-xxxx-xxxx-x${idCard.substr(-1)}`;
  }

  /**
   * ‡∏™‡∏£‡πâ‡∏≤‡∏á Request ID ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°
   * @returns {string} Request ID
   */
  generateRequestId() {
    return `GOV_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
  }

  /**
   * ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô API
   * @param {string} source - ‡πÅ‡∏´‡∏•‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
   * @param {string} operation - ‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£
   * @param {string} status - ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
   * @param {Object} metadata - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
   */
  async logAPIUsage(source, operation, status, metadata = {}) {
    try {
      const db = admin.firestore();
      
      await db.collection('government_api_logs').add({
        source: source,
        operation: operation,
        status: status,
        metadata: metadata,
        timestamp: admin.firestore.FieldValue.serverTimestamp(),
        date: new Date().toISOString().split('T')[0] // YYYY-MM-DD
      });
      
    } catch (error) {
      console.error('‚ùå Error logging API usage:', error);
    }
  }

  /**
   * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Rate Limit
   * @param {string} source - ‡πÅ‡∏´‡∏•‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
   * @returns {boolean} ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡πÑ‡∏î‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
   */
  async checkRateLimit(source) {
    try {
      const db = admin.firestore();
      const now = new Date();
      const oneHourAgo = new Date(now.getTime() - 60 * 60 * 1000);
      
      const recentRequests = await db.collection('government_api_logs')
        .where('source', '==', source)
        .where('timestamp', '>=', admin.firestore.Timestamp.fromDate(oneHourAgo))
        .get();
      
      return recentRequests.size < this.rate_limit.requests_per_hour;
      
    } catch (error) {
      console.error('‚ùå Error checking rate limit:', error);
      return true; // Allow request if check fails
    }
  }

  /**
   * ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô API
   * @param {string} period - ‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤ (today, week, month)
   * @returns {Object} ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
   */
  async getAPIUsageStats(period = 'today') {
    try {
      const db = admin.firestore();
      let startDate;
      
      switch (period) {
        case 'week':
          startDate = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000);
          break;
        case 'month':
          startDate = new Date(Date.now() - 30 * 24 * 60 * 60 * 1000);
          break;
        default: // today
          startDate = new Date();
          startDate.setHours(0, 0, 0, 0);
      }
      
      const logs = await db.collection('government_api_logs')
        .where('timestamp', '>=', admin.firestore.Timestamp.fromDate(startDate))
        .get();
      
      const stats = {
        total_requests: logs.size,
        successful_requests: 0,
        failed_requests: 0,
        by_source: {},
        by_operation: {}
      };
      
      logs.forEach(doc => {
        const data = doc.data();
        
        if (data.status === 'success') {
          stats.successful_requests++;
        } else {
          stats.failed_requests++;
        }
        
        // Count by source
        stats.by_source[data.source] = (stats.by_source[data.source] || 0) + 1;
        
        // Count by operation
        stats.by_operation[data.operation] = (stats.by_operation[data.operation] || 0) + 1;
      });
      
      return stats;
      
    } catch (error) {
      console.error('‚ùå Error getting API usage stats:', error);
      return null;
    }
  }
}

module.exports = new GovernmentAPIService();
