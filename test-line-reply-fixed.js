// üß™ ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö LINE Bot - BaanTK (Fixed Version)
const lineModule = require('./functions/line-auto-reply.js');

console.log("üéØ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö LINE Bot - BaanTK (Fixed)");
console.log("============================================================");

// Mock User ID ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö
const TEST_USER_ID = "U1234567890abcdef1234567890abcdef1";
const TEST_REPLY_TOKEN = "reply-token-for-testing";

async function testDirectFunctions() {
  console.log("\nüß™ === ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ Function ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á ===\n");
  
  const testCases = [
    { message: "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ", description: "‡∏ó‡∏±‡∏Å‡∏ó‡∏≤‡∏¢" },
    { message: "‡πÄ‡∏°‡∏ô‡∏π", description: "‡∏Ç‡∏≠‡∏î‡∏π‡πÄ‡∏°‡∏ô‡∏π" },
    { message: "‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏¥‡∏ô‡πÄ‡∏ä‡∏∑‡πà‡∏≠", description: "‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏¥‡∏ô‡πÄ‡∏ä‡∏∑‡πà‡∏≠" },
    { message: "‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞", description: "‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞" },
    { message: "‡∏™‡πà‡∏á‡∏™‡∏•‡∏¥‡∏õ", description: "‡∏™‡πà‡∏á‡∏´‡∏•‡∏±‡∏Å‡∏ê‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞" },
    { message: "‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà", description: "‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠" },
    { message: "‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£", description: "‡∏î‡∏π‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç" },
    { message: "‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó", description: "‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡πÄ‡∏£‡∏≤" },
    { message: "hello", description: "‡∏ó‡∏±‡∏Å‡∏ó‡∏≤‡∏¢‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©" },
    { message: "‡∏Ç‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠", description: "‡∏Ç‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠" },
    { message: "‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à xyz abc", description: "‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à" }
  ];

  for (let i = 0; i < testCases.length; i++) {
    const { message, description } = testCases[i];
    console.log(`${i + 1}. üì± ‡∏ó‡∏î‡∏™‡∏≠‡∏ö: ${description}`);
    console.log(`   ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°: "${message}"`);
    
    try {
      const result = await lineModule.processLineMessage(TEST_USER_ID, message, TEST_REPLY_TOKEN);
      
      if (result && result.success) {
        console.log(`   ‚úÖ ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`);
        if (result.reply && result.reply.length > 0) {
          console.log(`   üí¨ ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö: ${result.reply[0].substring(0, 100)}...`);
        }
      } else {
        console.log(`   ‚ùå ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${result?.error || 'Unknown error'}`);
      }
    } catch (error) {
      console.log(`   ‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${error.message}`);
    }
    console.log();
  }
}

async function testPostbackFunctions() {
  console.log("\nüß™ === ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Postback Events (Direct Function Call) ===\n");
  
  const postbackTests = [
    { data: "action=register", description: "‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏¥‡∏ô‡πÄ‡∏ä‡∏∑‡πà‡∏≠" },
    { data: "action=menu", description: "‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏°‡∏ô‡∏π" },
    { data: "action=check_status", description: "‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞" },
    { data: "action=payment", description: "‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏™‡πà‡∏á‡∏™‡∏•‡∏¥‡∏õ" },
    { data: "action=contact", description: "‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠" },
    { data: "action=terms", description: "‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç" },
    { data: "action=about", description: "‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡πÄ‡∏£‡∏≤" }
  ];

  for (let i = 0; i < postbackTests.length; i++) {
    const { data, description } = postbackTests[i];
    console.log(`${i + 1}. üîò ‡∏ó‡∏î‡∏™‡∏≠‡∏ö: ${description}`);
    console.log(`   Postback Data: "${data}"`);
    
    try {
      const result = await lineModule.processPostbackEvent(TEST_USER_ID, data, TEST_REPLY_TOKEN);
      
      if (result && result.success) {
        console.log(`   ‚úÖ ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`);
        if (result.reply && result.reply.length > 0) {
          console.log(`   üí¨ ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö: ${result.reply[0].substring(0, 100)}...`);
        }
      } else {
        console.log(`   ‚ùå ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${result?.error || 'Unknown error'}`);
      }
    } catch (error) {
      console.log(`   ‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${error.message}`);
    }
    console.log();
  }
}

async function testNotificationFunctions() {
  console.log("\nüß™ === ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô ===\n");
  
  // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏™‡∏•‡∏¥‡∏õ
  console.log("1. üìã ‡∏ó‡∏î‡∏™‡∏≠‡∏ö: ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏™‡∏•‡∏¥‡∏õ");
  try {
    const result = await lineModule.sendSlipApprovalNotification(
      TEST_USER_ID, 
      "approved", 
      { slipId: "slip123", amount: 5000, date: "2024-01-01" }
    );
    
    if (result && result.success) {
      console.log("   ‚úÖ ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏™‡∏•‡∏¥‡∏õ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
    } else {
      console.log(`   ‚ùå ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${result?.error || 'Unknown error'}`);
    }
  } catch (error) {
    console.log(`   ‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${error.message}`);
  }
  console.log();

  // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£
  console.log("2. üìù ‡∏ó‡∏î‡∏™‡∏≠‡∏ö: ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£");
  try {
    const result = await lineModule.sendApplicationStatusNotification(
      TEST_USER_ID, 
      "approved", 
      { applicationId: "app123", loanAmount: 10000 }
    );
    
    if (result && result.success) {
      console.log("   ‚úÖ ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
    } else {
      console.log(`   ‚ùå ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${result?.error || 'Unknown error'}`);
    }
  } catch (error) {
    console.log(`   ‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${error.message}`);
  }
  console.log();
}

async function testConfigurationAndMocks() {
  console.log("\nüß™ === ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏•‡∏∞ Mock Functions ===\n");
  
  // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ LINE
  console.log("1. ‚öôÔ∏è ‡∏ó‡∏î‡∏™‡∏≠‡∏ö: ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ LINE Configuration");
  console.log(`   Access Token: ${lineModule.LINE_CONFIG.hasAccessToken ? '‚úÖ ‡∏°‡∏µ' : '‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ'}`);
  console.log(`   Channel Secret: ${lineModule.LINE_CONFIG.hasSecret ? '‚úÖ ‡∏°‡∏µ' : '‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ'}`);
  console.log(`   Token Length: ${lineModule.LINE_CONFIG.channelAccessToken?.length || 0} characters`);
  console.log();

  // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö sendReply function (Mock)
  console.log("2. üí¨ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö: sendReply Function (Mock Mode)");
  try {
    const mockMessages = [
      { type: "text", text: "‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö" },
      { type: "text", text: "‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö sendReply ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥" }
    ];
    
    const result = await lineModule.sendReply(TEST_REPLY_TOKEN, mockMessages);
    
    if (result && result.success) {
      console.log("   ‚úÖ sendReply ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥ (Mock Mode)");
    } else {
      console.log(`   ‚ùå sendReply ‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô: ${result?.error || 'Unknown error'}`);
    }
  } catch (error) {
    console.log(`   ‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${error.message}`);
  }
  console.log();

  // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö User States
  console.log("3. üë§ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö: User States Management");
  try {
    if (lineModule.userStates) {
      lineModule.userStates.set(TEST_USER_ID, { 
        currentStep: "test", 
        data: { test: true } 
      });
      
      const userState = lineModule.userStates.get(TEST_USER_ID);
      if (userState && userState.currentStep === "test") {
        console.log("   ‚úÖ User States ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÑ‡∏î‡πâ‡∏õ‡∏Å‡∏ï‡∏¥");
      } else {
        console.log("   ‚ùå User States ‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏Ñ‡∏≤‡∏î‡∏´‡∏ß‡∏±‡∏á");
      }
    } else {
      console.log("   ‚ùå User States ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô");
    }
  } catch (error) {
    console.log(`   ‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${error.message}`);
  }
  console.log();
}

async function runAllTests() {
  try {
    await testDirectFunctions();
    await testPostbackFunctions(); 
    await testNotificationFunctions();
    await testConfigurationAndMocks();
    
    console.log("üìä === ‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö ===");
    console.log("üîß ‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏ó‡∏î‡∏™‡∏≠‡∏ö:");
    console.log("   ‚Ä¢ ‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πà‡∏≤‡∏á‡πÜ (Direct Function Calls)");
    console.log("   ‚Ä¢ Postback Events (Direct Function Calls)");
    console.log("   ‚Ä¢ ‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô");
    console.log("   ‚Ä¢ ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏•‡∏∞ Mock Functions");
    console.log("   ‚Ä¢ User States Management");
    console.log();
    console.log("üí° ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏:");
    console.log("   ‚Ä¢ ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ Mock Data ‡πÅ‡∏•‡∏∞ Direct Function Calls");
    console.log("   ‚Ä¢ ‡πÉ‡∏ô Production ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ LINE Token ‡πÅ‡∏•‡∏∞ User ID ‡∏à‡∏£‡∏¥‡∏á");
    console.log("   ‚Ä¢ ‡∏ï‡πâ‡∏≠‡∏á Deploy ‡πÑ‡∏õ‡∏¢‡∏±‡∏á Firebase Functions ‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Webhook");
    console.log("   ‚Ä¢ Error 401 ‡πÉ‡∏ô Push Message ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏õ‡∏Å‡∏ï‡∏¥‡πÉ‡∏ô Test Environment");
    console.log();
    console.log("üöÄ ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ï‡πà‡∏≠‡πÑ‡∏õ:");
    console.log("   1. Deploy ‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á Firebase Functions");
    console.log("   2. ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Webhook URL ‡πÉ‡∏ô LINE Developers Console");
    console.log("   3. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏±‡∏ö User ID ‡πÅ‡∏•‡∏∞ Token ‡∏à‡∏£‡∏¥‡∏á");
    console.log("   4. Monitor logs ‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏£‡∏∞‡∏ö‡∏ö");
    console.log();
    console.log("‚úÖ ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!");
    
  } catch (error) {
    console.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö:", error);
  }
}

// ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö
runAllTests();
