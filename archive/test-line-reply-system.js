// üß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö LINE Bot - BaanTK
const { processLineEvent, sendPushMessage } = require('./functions/line-auto-reply.js');

// ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö
const TEST_USER_ID = "U1234567890abcdef1234567890abcdef1"; // User ID ‡∏ó‡∏î‡∏™‡∏≠‡∏ö
const TEST_REPLY_TOKEN = "test-reply-token-12345"; // Reply Token ‡∏ó‡∏î‡∏™‡∏≠‡∏ö

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á Mock Event
function createMockEvent(type, messageText = null, postbackData = null, replyToken = TEST_REPLY_TOKEN) {
  const baseEvent = {
    type,
    timestamp: Date.now(),
    source: {
      type: "user",
      userId: TEST_USER_ID
    },
    replyToken
  };

  if (type === "message" && messageText) {
    return {
      ...baseEvent,
      message: {
        type: "text",
        text: messageText,
        id: `msg-${Date.now()}`
      }
    };
  }

  if (type === "postback" && postbackData) {
    return {
      ...baseEvent,
      postback: {
        data: postbackData
      }
    };
  }

  if (type === "follow") {
    return baseEvent;
  }

  return baseEvent;
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πà‡∏≤‡∏á‡πÜ
async function testMessageReplies() {
  console.log("üß™ === ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° LINE Bot ===\n");

  const testCases = [
    { type: "message", text: "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ", description: "‡∏ó‡∏±‡∏Å‡∏ó‡∏≤‡∏¢" },
    { type: "message", text: "‡πÄ‡∏°‡∏ô‡∏π", description: "‡∏Ç‡∏≠‡∏î‡∏π‡πÄ‡∏°‡∏ô‡∏π" },
    { type: "message", text: "‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏¥‡∏ô‡πÄ‡∏ä‡∏∑‡πà‡∏≠", description: "‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏¥‡∏ô‡πÄ‡∏ä‡∏∑‡πà‡∏≠" },
    { type: "message", text: "‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞", description: "‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞" },
    { type: "message", text: "‡∏™‡πà‡∏á‡∏™‡∏•‡∏¥‡∏õ", description: "‡∏™‡πà‡∏á‡∏´‡∏•‡∏±‡∏Å‡∏ê‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞" },
    { type: "message", text: "‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà", description: "‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠" },
    { type: "message", text: "‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£", description: "‡∏î‡∏π‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç" },
    { type: "message", text: "‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó", description: "‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡πÄ‡∏£‡∏≤" },
    { type: "message", text: "hello", description: "‡∏ó‡∏±‡∏Å‡∏ó‡∏≤‡∏¢‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©" },
    { type: "message", text: "‡∏Ç‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠", description: "‡∏Ç‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠" },
    { type: "message", text: "‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à xyz abc", description: "‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à" }
  ];

  for (let i = 0; i < testCases.length; i++) {
    const testCase = testCases[i];
    console.log(`\n${i + 1}. üì± ‡∏ó‡∏î‡∏™‡∏≠‡∏ö: ${testCase.description}`);
    console.log(`   ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°: "${testCase.text}"`);
    
    try {
      const event = createMockEvent(testCase.type, testCase.text);
      const result = await processLineEvent(event);
      
      if (result && result.success) {
        console.log(`   ‚úÖ ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:`, {
          messageType: result.messageType || 'text',
          messagesSent: result.messagesSent || 1
        });
      } else {
        console.log(`   ‚ùå ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:`, result?.error || 'Unknown error');
      }
    } catch (error) {
      console.log(`   ‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${error.message}`);
    }
    
    // ‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡πÄ‡∏£‡πá‡∏ß‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ
    await new Promise(resolve => setTimeout(resolve, 500));
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö Postback Events
async function testPostbackEvents() {
  console.log("\n\nüß™ === ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Postback Events ===\n");

  const postbackTests = [
    { data: "action=register", description: "‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏¥‡∏ô‡πÄ‡∏ä‡∏∑‡πà‡∏≠" },
    { data: "action=menu", description: "‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏°‡∏ô‡∏π" },
    { data: "action=check_status", description: "‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞" },
    { data: "action=payment", description: "‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏™‡πà‡∏á‡∏™‡∏•‡∏¥‡∏õ" },
    { data: "action=contact", description: "‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠" },
    { data: "action=terms", description: "‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç" },
    { data: "action=about", description: "‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡πÄ‡∏£‡∏≤" }
  ];

  for (let i = 0; i < postbackTests.length; i++) {
    const test = postbackTests[i];
    console.log(`\n${i + 1}. üîò ‡∏ó‡∏î‡∏™‡∏≠‡∏ö: ${test.description}`);
    console.log(`   Postback Data: "${test.data}"`);
    
    try {
      const event = createMockEvent("postback", null, test.data);
      const result = await processLineEvent(event);
      
      if (result && result.success) {
        console.log(`   ‚úÖ ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:`, {
          messageType: result.messageType || 'text',
          messagesSent: result.messagesSent || 1
        });
      } else {
        console.log(`   ‚ùå ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:`, result?.error || 'Unknown error');
      }
    } catch (error) {
      console.log(`   ‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${error.message}`);
    }
    
    await new Promise(resolve => setTimeout(resolve, 500));
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö Follow/Unfollow Events
async function testFollowEvents() {
  console.log("\n\nüß™ === ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Follow/Unfollow Events ===\n");

  console.log("1. üëã ‡∏ó‡∏î‡∏™‡∏≠‡∏ö: ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô (Follow Event)");
  try {
    const followEvent = createMockEvent("follow");
    const result = await processLineEvent(followEvent);
    
    if (result && result.success) {
      console.log(`   ‚úÖ ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• Follow Event ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`);
      console.log(`   User ID: ${result.userId}`);
      console.log(`   Display Name: ${result.displayName || '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ (mock test)'}`);
    } else {
      console.log(`   ‚ùå ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• Follow Event ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:`, result?.error);
    }
  } catch (error) {
    console.log(`   ‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${error.message}`);
  }

  await new Promise(resolve => setTimeout(resolve, 1000));

  console.log("\n2. üëã ‡∏ó‡∏î‡∏™‡∏≠‡∏ö: ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô (Unfollow Event)");
  try {
    const unfollowEvent = createMockEvent("unfollow");
    const result = await processLineEvent(unfollowEvent);
    
    if (result && result.success) {
      console.log(`   ‚úÖ ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• Unfollow Event ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`);
      console.log(`   User ID: ${result.userId}`);
    } else {
      console.log(`   ‚ùå ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• Unfollow Event ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:`, result?.error);
    }
  } catch (error) {
    console.log(`   ‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${error.message}`);
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á Push Message
async function testPushMessage() {
  console.log("\n\nüß™ === ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á Push Message ===\n");

  console.log("üì§ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö: ‡∏™‡πà‡∏á Push Message");
  console.log(`Target User ID: ${TEST_USER_ID}`);
  
  const messages = [
    "üîî ‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö BaanTK",
    "üì± ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö Push Message ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥",
    "‚úÖ ‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô!"
  ];

  try {
    const result = await sendPushMessage(TEST_USER_ID, messages);
    
    if (result && result.success) {
      console.log(`   ‚úÖ ‡∏™‡πà‡∏á Push Message ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`);
      console.log(`   ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°: ${messages.length}`);
      messages.forEach((msg, index) => {
        console.log(`   ${index + 1}. "${msg}"`);
      });
    } else {
      console.log(`   ‚ùå ‡∏™‡πà‡∏á Push Message ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:`, result?.error);
    }
  } catch (error) {
    console.log(`   ‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${error.message}`);
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• ID Card
async function testIdCardProcessing() {
  console.log("\n\nüß™ === ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô ===\n");

  const idCardTests = [
    "1234567890123",
    "1-2345-67890-12-3",
    "‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô 1234567890123",
    "ID: 1234567890123",
    "‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà 1-2345-67890-12-3"
  ];

  for (let i = 0; i < idCardTests.length; i++) {
    const idText = idCardTests[i];
    console.log(`\n${i + 1}. üÜî ‡∏ó‡∏î‡∏™‡∏≠‡∏ö: ‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô`);
    console.log(`   ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°: "${idText}"`);
    
    try {
      const event = createMockEvent("message", idText);
      const result = await processLineEvent(event);
      
      if (result && result.success) {
        console.log(`   ‚úÖ ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`);
      } else {
        console.log(`   ‚ùå ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:`, result?.error);
      }
    } catch (error) {
      console.log(`   ‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${error.message}`);
    }
    
    await new Promise(resolve => setTimeout(resolve, 500));
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö
function showTestSummary() {
  console.log("\n\nüìä === ‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö ===");
  console.log("üîß ‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏ó‡∏î‡∏™‡∏≠‡∏ö:");
  console.log("   ‚Ä¢ ‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πà‡∏≤‡∏á‡πÜ");
  console.log("   ‚Ä¢ Postback Events (‡∏õ‡∏∏‡πà‡∏°‡∏ï‡πà‡∏≤‡∏á‡πÜ)");
  console.log("   ‚Ä¢ Follow/Unfollow Events");
  console.log("   ‚Ä¢ Push Message");
  console.log("   ‚Ä¢ ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô");
  
  console.log("\nüí° ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏:");
  console.log("   ‚Ä¢ ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ Mock Data (‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏•‡∏≠‡∏á)");
  console.log("   ‚Ä¢ ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ LINE Token ‡πÅ‡∏•‡∏∞ User ID ‡∏à‡∏£‡∏¥‡∏á");
  console.log("   ‚Ä¢ ‡∏ï‡πâ‡∏≠‡∏á Deploy ‡πÑ‡∏õ‡∏¢‡∏±‡∏á Server ‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Webhook");
  
  console.log("\nüöÄ ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ï‡πà‡∏≠‡πÑ‡∏õ:");
  console.log("   1. Deploy ‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á Firebase Functions");
  console.log("   2. ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Webhook URL ‡πÉ‡∏ô LINE Developers Console");
  console.log("   3. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏±‡∏ö User ID ‡∏à‡∏£‡∏¥‡∏á");
  console.log("   4. Monitor logs ‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏£‡∏∞‡∏ö‡∏ö");
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
async function runAllTests() {
  console.log("üéØ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö LINE Bot - BaanTK");
  console.log("=" .repeat(60));
  
  try {
    // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
    await testMessageReplies();
    
    // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Postback Events
    await testPostbackEvents();
    
    // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Follow/Unfollow Events
    await testFollowEvents();
    
    // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Push Message (‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ Token ‡∏à‡∏£‡∏¥‡∏á)
    await testPushMessage();
    
    // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô
    await testIdCardProcessing();
    
    // ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏£‡∏∏‡∏õ
    showTestSummary();
    
    console.log("\n‚úÖ ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!");
    
  } catch (error) {
    console.error("\n‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö:", error);
  }
}

// ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏ñ‡∏π‡∏Å‡∏£‡∏±‡∏ô‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
if (require.main === module) {
  runAllTests().catch(console.error);
}

module.exports = {
  runAllTests,
  testMessageReplies,
  testPostbackEvents,
  testFollowEvents,
  testPushMessage,
  testIdCardProcessing,
  createMockEvent
};
