// ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö
const axios = require('axios');

const WEBHOOK_URL = 'https://webhook-kkrrpg5icq-uc.a.run.app';

// ‡∏™‡∏£‡πâ‡∏≤‡∏á test events ‡πÅ‡∏ö‡∏ö‡∏ï‡πà‡∏≤‡∏á‡πÜ
function createTestEvents() {
  return {
    // ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤
    textMessage: {
      events: [
        {
          type: 'message',
          message: {
            type: 'text',
            text: '‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ'
          },
          replyToken: 'test-reply-token-' + Date.now(),
          source: {
            userId: 'test-user-text',
            type: 'user'
          },
          timestamp: Date.now()
        }
      ]
    },

    // ‡∏Å‡∏≤‡∏£‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°
    postbackEvent: {
      events: [
        {
          type: 'postback',
          postback: {
            data: 'action=menu'
          },
          replyToken: 'test-postback-token-' + Date.now(),
          source: {
            userId: 'test-user-postback',
            type: 'user'
          },
          timestamp: Date.now()
        }
      ]
    },

    // Follow event
    followEvent: {
      events: [
        {
          type: 'follow',
          replyToken: 'test-follow-token-' + Date.now(),
          source: {
            userId: 'test-user-follow',
            type: 'user'
          },
          timestamp: Date.now()
        }
      ]
    },

    // ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
    statusMessage: {
      events: [
        {
          type: 'message',
          message: {
            type: 'text',
            text: '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞'
          },
          replyToken: 'test-status-token-' + Date.now(),
          source: {
            userId: 'test-user-status',
            type: 'user'
          },
          timestamp: Date.now()
        }
      ]
    }
  };
}

// ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ webhook
async function testWebhookConnection() {
  console.log('üîç ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ webhook...');
  
  try {
    const response = await axios.get(WEBHOOK_URL, {
      timeout: 10000
    });
    
    console.log('‚úÖ Webhook accessible');
    console.log('üìã Status:', response.status);
    console.log('üìÑ Response:', response.data);
    return true;
  } catch (error) {
    console.error('‚ùå Webhook connection failed:', error.message);
    if (error.response) {
      console.error('üìã Error Status:', error.response.status);
      console.error('üìÑ Error Data:', error.response.data);
    }
    return false;
  }
}

// ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÅ‡∏ö‡∏ö
async function testMessageResponse(eventName, eventData) {
  console.log(`\nüì§ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö: ${eventName}`);
  console.log('=' * 40);
  
  try {
    const startTime = Date.now();
    const response = await axios.post(WEBHOOK_URL, eventData, {
      headers: {
        'Content-Type': 'application/json',
        'x-line-signature': 'test-signature-' + Date.now()
      },
      timeout: 15000
    });
    
    const duration = Date.now() - startTime;
    
    console.log('‚úÖ Response received');
    console.log(`‚è±Ô∏è  Duration: ${duration}ms`);
    console.log('üìã Status:', response.status);
    console.log('üìÑ Response Data:', JSON.stringify(response.data, null, 2));
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á response
    if (response.data) {
      if (response.data.message === 'Success') {
        console.log('üéØ ‚úÖ Webhook processed successfully');
      } else if (response.data.error) {
        console.log('‚ö†Ô∏è  Warning: Response contains error');
      }
    }
    
    return { success: true, duration, data: response.data };
    
  } catch (error) {
    console.error('‚ùå Test failed:', error.message);
    
    if (error.response) {
      console.error('üìã Error Status:', error.response.status);
      console.error('üìÑ Error Data:', error.response.data);
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
      if (error.response.status === 403) {
        console.error('üîí Permission denied - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö LINE signature');
      } else if (error.response.status === 500) {
        console.error('üí• Server error - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö function logs');
      }
    } else if (error.code === 'ENOTFOUND') {
      console.error('üåê DNS/Network error - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö URL');
    } else if (error.code === 'ETIMEDOUT') {
      console.error('‚è∞ Timeout - function ‡∏≠‡∏≤‡∏à‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏≤‡∏ô');
    }
    
    return { success: false, error: error.message };
  }
}

// ‡∏ó‡∏î‡∏™‡∏≠‡∏ö LINE signature validation
async function testSignatureValidation() {
  console.log('\nüîê ‡∏ó‡∏î‡∏™‡∏≠‡∏ö LINE Signature Validation');
  console.log('-' * 40);
  
  const testEvent = {
    events: [
      {
        type: 'message',
        message: { type: 'text', text: 'test signature' },
        replyToken: 'test-sig-token',
        source: { userId: 'test-sig-user', type: 'user' }
      }
    ]
  };
  
  // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏°‡∏µ signature
  console.log('üì§ Test 1: No signature header');
  try {
    await axios.post(WEBHOOK_URL, testEvent, {
      headers: { 'Content-Type': 'application/json' },
      timeout: 10000
    });
    console.log('‚úÖ Accepted without signature');
  } catch (error) {
    console.log(`‚ùå Rejected: ${error.response?.status} ${error.message}`);
  }
  
  // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÅ‡∏ö‡∏ö signature ‡∏ú‡∏¥‡∏î
  console.log('\nüì§ Test 2: Invalid signature');
  try {
    await axios.post(WEBHOOK_URL, testEvent, {
      headers: {
        'Content-Type': 'application/json',
        'x-line-signature': 'invalid-signature'
      },
      timeout: 10000
    });
    console.log('‚úÖ Accepted with invalid signature');
  } catch (error) {
    console.log(`‚ùå Rejected: ${error.response?.status} ${error.message}`);
  }
}

// ‡∏£‡∏ß‡∏ö‡∏£‡∏ß‡∏°‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö
async function runAllTests() {
  console.log('üß™ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö LINE Bot Auto-Reply');
  console.log('üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà:', new Date().toLocaleString('th-TH'));
  console.log('üîó Webhook URL:', WEBHOOK_URL);
  console.log('=' * 60);
  
  const results = [];
  
  // 1. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
  const connectionOk = await testWebhookConnection();
  if (!connectionOk) {
    console.log('\n‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ webhook ‡πÑ‡∏î‡πâ ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö');
    return;
  }
  
  // 2. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö signature validation
  await testSignatureValidation();
  
  // 3. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÅ‡∏ö‡∏ö
  const testEvents = createTestEvents();
  
  for (const [eventName, eventData] of Object.entries(testEvents)) {
    const result = await testMessageResponse(eventName, eventData);
    results.push({ eventName, ...result });
    
    // ‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ spam
    await new Promise(resolve => setTimeout(resolve, 1000));
  }
  
  // 4. ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö
  console.log('\nüìä ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö');
  console.log('=' * 50);
  
  const successful = results.filter(r => r.success).length;
  const total = results.length;
  
  console.log(`‚úÖ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${successful}/${total} tests`);
  console.log(`‚ùå ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ${total - successful}/${total} tests`);
  
  if (successful === total) {
    console.log('\nüéâ ‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î!');
    console.log('üí° ‡∏´‡∏≤‡∏Å‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö:');
    console.log('  - LINE Channel Settings');
    console.log('  - Webhook URL ‡πÉ‡∏ô LINE Developers Console');
    console.log('  - LINE Bot permissions');
  } else {
    console.log('\n‚ö†Ô∏è  ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß');
    console.log('üí° ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Firebase Functions logs:');
    console.log('  firebase functions:log --limit 50');
  }
  
  // ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÅ‡∏ï‡πà‡∏•‡∏∞ test
  console.log('\nüìã ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö:');
  results.forEach(result => {
    const status = result.success ? '‚úÖ' : '‚ùå';
    const duration = result.duration ? `(${result.duration}ms)` : '';
    console.log(`  ${status} ${result.eventName} ${duration}`);
    if (!result.success) {
      console.log(`    Error: ${result.error}`);
    }
  });
}

if (require.main === module) {
  runAllTests().catch(console.error);
}

module.exports = {
  testWebhookConnection,
  testMessageResponse,
  testSignatureValidation,
  createTestEvents
};
