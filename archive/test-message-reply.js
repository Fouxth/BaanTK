// üß™ Test Script ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° LINE Bot
const axios = require('axios');

// Configuration
const TEST_CONFIG = {
  // URL ‡∏Ç‡∏≠‡∏á Firebase Functions (production)
  webhookUrl: 'https://us-central1-baan-tk.cloudfunctions.net/webhook',
  
  // Test user ID (mock)
  testUserId: 'U1234567890abcdef1234567890abcdef',
  
  // Test reply token (mock)
  testReplyToken: 'test-reply-token-12345',
  
  // LINE Channel Secret ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö signature (‡πÉ‡∏ä‡πâ dummy ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö test)
  channelSecret: 'dummy-secret-for-testing'
};

// ‡∏™‡∏£‡πâ‡∏≤‡∏á signature ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö LINE webhook
function createSignature(body, secret) {
  const crypto = require('crypto');
  const signature = crypto
    .createHmac('sha256', secret)
    .update(body)
    .digest('base64');
  return signature;
}

// ‡∏™‡∏£‡πâ‡∏≤‡∏á mock LINE webhook event
function createLineEvent(messageText, eventType = 'message') {
  const event = {
    type: eventType,
    timestamp: Date.now(),
    source: {
      type: 'user',
      userId: TEST_CONFIG.testUserId
    },
    replyToken: TEST_CONFIG.testReplyToken
  };

  if (eventType === 'message') {
    event.message = {
      id: 'msg-' + Date.now(),
      type: 'text',
      text: messageText
    };
  } else if (eventType === 'postback') {
    event.postback = {
      data: messageText // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö postback ‡πÉ‡∏ä‡πâ messageText ‡πÄ‡∏õ‡πá‡∏ô data
    };
  } else if (eventType === 'follow') {
    // Follow event ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ message
  }

  return event;
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
async function testMessage(messageText, eventType = 'message') {
  try {
    console.log(`\nüß™ Testing ${eventType}: "${messageText}"`);
    console.log('='.repeat(50));
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á LINE webhook payload
    const event = createLineEvent(messageText, eventType);
    const webhookBody = {
      events: [event]
    };
    
    const bodyString = JSON.stringify(webhookBody);
    const signature = createSignature(bodyString, TEST_CONFIG.channelSecret);
    
    console.log(`üì§ Sending webhook to: ${TEST_CONFIG.webhookUrl}`);
    console.log(`üìù Event type: ${eventType}`);
    console.log(`üë§ User ID: ${TEST_CONFIG.testUserId}`);
    console.log(`üîë Signature: ${signature.substring(0, 20)}...`);
    
    // ‡∏™‡πà‡∏á request ‡πÑ‡∏õ‡∏¢‡∏±‡∏á webhook
    const startTime = Date.now();
    const response = await axios.post(TEST_CONFIG.webhookUrl, webhookBody, {
      headers: {
        'Content-Type': 'application/json',
        'X-Line-Signature': signature,
        'User-Agent': 'LineBotSdk/1.0'
      },
      timeout: 10000 // 10 seconds timeout
    });
    
    const responseTime = Date.now() - startTime;
    
    console.log(`‚úÖ Response received in ${responseTime}ms`);
    console.log(`üìä Status: ${response.status} ${response.statusText}`);
    console.log(`üìÑ Response data:`, response.data);
    
    return {
      success: true,
      status: response.status,
      data: response.data,
      responseTime
    };
    
  } catch (error) {
    console.log(`‚ùå Test failed for "${messageText}"`);
    
    if (error.response) {
      console.log(`üìä HTTP Status: ${error.response.status}`);
      console.log(`üìÑ Error data:`, error.response.data);
      console.log(`üìã Headers:`, error.response.headers);
    } else if (error.request) {
      console.log(`üì° Network error - no response received`);
      console.log(`üîó Request details:`, error.request);
    } else {
      console.log(`‚öôÔ∏è Setup error:`, error.message);
    }
    
    return {
      success: false,
      error: error.message,
      status: error.response?.status,
      data: error.response?.data
    };
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏´‡∏•‡∏≤‡∏¢‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
async function runAllTests() {
  console.log('üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö LINE Bot Auto-Reply');
  console.log(`‚è∞ ${new Date().toLocaleString('th-TH')}`);
  console.log('='.repeat(70));
  
  const testCases = [
    // Basic greetings
    { text: '‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ', type: 'message', description: '‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡∏Å‡∏ó‡∏≤‡∏¢' },
    { text: 'hello', type: 'message', description: '‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡∏Å‡∏ó‡∏≤‡∏¢‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©' },
    
    // Menu requests  
    { text: '‡πÄ‡∏°‡∏ô‡∏π', type: 'message', description: '‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏î‡∏π‡πÄ‡∏°‡∏ô‡∏π' },
    { text: 'help', type: 'message', description: '‡∏Ç‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠' },
    
    // Service requests
    { text: '‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏¥‡∏ô‡πÄ‡∏ä‡∏∑‡πà‡∏≠', type: 'message', description: '‡∏Ç‡∏≠‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏¥‡∏ô‡πÄ‡∏ä‡∏∑‡πà‡∏≠' },
    { text: '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞', type: 'message', description: '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞' },
    { text: '‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà', type: 'message', description: '‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà' },
    
    // Postback events
    { text: 'action=register', type: 'postback', description: '‡∏õ‡∏∏‡πà‡∏°‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏¥‡∏ô‡πÄ‡∏ä‡∏∑‡πà‡∏≠' },
    { text: 'action=menu', type: 'postback', description: '‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏°‡∏ô‡∏π' },
    { text: 'action=check_status', type: 'postback', description: '‡∏õ‡∏∏‡πà‡∏°‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞' },
    
    // Follow event
    { text: '', type: 'follow', description: '‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô' },
    
    // Unknown message
    { text: '‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å', type: 'message', description: '‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å' }
  ];
  
  const results = [];
  
  for (let i = 0; i < testCases.length; i++) {
    const testCase = testCases[i];
    console.log(`\nüìã Test ${i + 1}/${testCases.length}: ${testCase.description}`);
    
    const result = await testMessage(testCase.text, testCase.type);
    results.push({
      ...testCase,
      result
    });
    
    // ‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö
    await new Promise(resolve => setTimeout(resolve, 1000));
  }
  
  // ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö
  console.log('\nüìä ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö');
  console.log('='.repeat(70));
  
  const successful = results.filter(r => r.result.success);
  const failed = results.filter(r => !r.result.success);
  
  console.log(`‚úÖ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${successful.length}/${results.length}`);
  console.log(`‚ùå ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ${failed.length}/${results.length}`);
  
  if (failed.length > 0) {
    console.log('\n‚ùå ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:');
    failed.forEach(test => {
      console.log(`- ${test.description}: ${test.result.error || 'Unknown error'}`);
    });
  }
  
  if (successful.length > 0) {
    const avgResponseTime = successful.reduce((sum, test) => 
      sum + (test.result.responseTime || 0), 0) / successful.length;
    console.log(`‚ö° ‡πÄ‡∏ß‡∏•‡∏≤‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢: ${avgResponseTime.toFixed(0)}ms`);
  }
  
  return results;
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Firebase Functions
async function testConnection() {
  try {
    console.log('üîó ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Firebase Functions...');
    
    const response = await axios.get(TEST_CONFIG.webhookUrl.replace('/lineWebhook', ''), {
      timeout: 5000
    });
    
    console.log(`‚úÖ ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à - Status: ${response.status}`);
    return true;
  } catch (error) {
    console.log(`‚ùå ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:`, error.message);
    return false;
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ô test
async function main() {
  try {
    console.log('üîß LINE Bot Auto-Reply Test Suite');
    console.log('üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà:', new Date().toLocaleDateString('th-TH'));
    
    // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡πà‡∏≠‡∏ô
    console.log('\n1Ô∏è‚É£ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠...');
    const connectionOk = await testConnection();
    
    if (!connectionOk) {
      console.log('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö URL ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£ deploy');
      return;
    }
    
    console.log('\n2Ô∏è‚É£ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Webhook ‡πÅ‡∏•‡∏∞ Auto-Reply...');
    const results = await runAllTests();
    
    console.log('\n‚úÖ ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô');
    
  } catch (error) {
    console.error('üí• ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö:', error);
  }
}

// ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
if (require.main === module) {
  main();
}

module.exports = {
  testMessage,
  runAllTests,
  testConnection
};
