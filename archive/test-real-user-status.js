// üß™ Test Script ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏î‡πâ‡∏ß‡∏¢ Real User ID
const axios = require('axios');

// Configuration
const TEST_CONFIG = {
  webhookUrl: 'https://us-central1-baan-tk.cloudfunctions.net/webhook',
  // User ID ‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å logs
  realUserId: 'U79c0d4968f31138b09d6e71c3bcc5296',
  testReplyToken: 'test-reply-token-12345',
  channelSecret: 'dummy-secret-for-testing'
};

// ‡∏™‡∏£‡πâ‡∏≤‡∏á signature ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö LINE webhook
function createSignature(body, secret) {
  const crypto = require('crypto');
  const signature = crypto
    .createHmac('sha256', secret)
    .update(body)
    .digest('base64');
  return signature;
}

// ‡∏™‡∏£‡πâ‡∏≤‡∏á mock LINE webhook event
function createLineEvent(messageText, eventType = 'message', userId = TEST_CONFIG.realUserId) {
  const event = {
    type: eventType,
    timestamp: Date.now(),
    source: {
      type: 'user',
      userId: userId
    },
    replyToken: TEST_CONFIG.testReplyToken
  };

  if (eventType === 'message') {
    event.message = {
      id: 'msg-' + Date.now(),
      type: 'text',
      text: messageText
    };
  } else if (eventType === 'postback') {
    event.postback = {
      data: messageText
    };
  }

  return event;
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
async function testStatusCheck() {
  try {
    console.log('üîç ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏î‡πâ‡∏ß‡∏¢ Real User ID');
    console.log(`üë§ User ID: ${TEST_CONFIG.realUserId}`);
    console.log('='.repeat(60));
    
    const testCases = [
      { text: '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞', type: 'message', desc: '‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞' },
      { text: '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞', type: 'message', desc: '‡∏û‡∏¥‡∏°‡∏û‡πå‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞' },
      { text: 'action=check_status', type: 'postback', desc: '‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞' }
    ];
    
    for (const testCase of testCases) {
      console.log(`\nüìã ‡∏ó‡∏î‡∏™‡∏≠‡∏ö: ${testCase.desc}`);
      console.log('-'.repeat(40));
      
      const event = createLineEvent(testCase.text, testCase.type);
      const webhookBody = { events: [event] };
      
      const bodyString = JSON.stringify(webhookBody);
      const signature = createSignature(bodyString, TEST_CONFIG.channelSecret);
      
      console.log(`üì§ ‡∏™‡πà‡∏á ${testCase.type}: "${testCase.text}"`);
      
      const startTime = Date.now();
      const response = await axios.post(TEST_CONFIG.webhookUrl, webhookBody, {
        headers: {
          'Content-Type': 'application/json',
          'X-Line-Signature': signature,
          'User-Agent': 'LineBotSdk/1.0'
        },
        timeout: 10000
      });
      
      const responseTime = Date.now() - startTime;
      
      console.log(`‚úÖ Response: ${response.status} (${responseTime}ms)`);
      console.log(`üìÑ Data:`, response.data);
      
      // ‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö
      await new Promise(resolve => setTimeout(resolve, 2000));
    }
    
  } catch (error) {
    console.error('‚ùå Error:', error.message);
    if (error.response) {
      console.log(`Status: ${error.response.status}`);
      console.log(`Data:`, error.response.data);
    }
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• test borrower
async function createTestBorrower() {
  try {
    console.log('üèóÔ∏è ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• test borrower...');
    
    const testData = {
      lineUserId: TEST_CONFIG.realUserId,
      fullName: '‡∏ó‡∏î‡∏™‡∏≠‡∏ö ‡∏£‡∏∞‡∏ö‡∏ö',
      phoneNumber: '0812345678',
      nationalId: '1234567890123',
      email: 'test@example.com',
      requestedAmount: 50000,
      purpose: '‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö',
      status: 'approved',
      referenceNumber: 'TK' + Date.now(),
      timestamp: new Date(),
      createdAt: new Date(),
      steps: [
        {
          step: 1,
          title: '‡∏¢‡∏∑‡πà‡∏ô‡πÉ‡∏ö‡∏™‡∏°‡∏±‡∏Ñ‡∏£',
          status: 'completed',
          timestamp: new Date(Date.now() - 86400000) // 1 ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß
        },
        {
          step: 2,
          title: '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£',
          status: 'completed',
          timestamp: new Date(Date.now() - 43200000) // 12 ‡∏ä‡∏°.‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß
        },
        {
          step: 3,
          title: '‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏™‡∏¥‡∏ô‡πÄ‡∏ä‡∏∑‡πà‡∏≠',
          status: 'completed',
          timestamp: new Date()
        }
      ]
    };
    
    // ‡πÉ‡∏ä‡πâ admin API ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const adminUrl = 'https://us-central1-baan-tk.cloudfunctions.net/adminApi/test-borrower';
    
    const response = await axios.post(adminUrl, testData, {
      headers: {
        'Content-Type': 'application/json',
        'Authorization': 'Bearer BaanTK@Adm1n' // admin token
      }
    });
    
    console.log('‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• test borrower ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
    console.log('üìÑ Response:', response.data);
    
  } catch (error) {
    console.error('‚ùå Error creating test borrower:', error.message);
    if (error.response) {
      console.log(`Status: ${error.response.status}`);
      console.log(`Data:`, error.response.data);
    }
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å
async function main() {
  try {
    console.log('üîß Real User Status Check Test');
    console.log(`‚è∞ ${new Date().toLocaleString('th-TH')}`);
    console.log('='.repeat(70));
    
    const args = process.argv.slice(2);
    const command = args[0] || 'test';
    
    if (command === 'create') {
      await createTestBorrower();
    } else if (command === 'test') {
      await testStatusCheck();
    } else if (command === 'all') {
      console.log('1Ô∏è‚É£ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• test borrower...\n');
      await createTestBorrower();
      
      console.log('\n2Ô∏è‚É£ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞...\n');
      await new Promise(resolve => setTimeout(resolve, 3000)); // ‡∏£‡∏≠ 3 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
      await testStatusCheck();
    } else {
      console.log('üìñ ‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:');
      console.log('  node test-real-user-status.js [command]');
      console.log('');
      console.log('üîß Commands:');
      console.log('  test     - ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ (default)');
      console.log('  create   - ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• test borrower');
      console.log('  all      - ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏ó‡∏î‡∏™‡∏≠‡∏ö');
    }
    
  } catch (error) {
    console.error('üí• Error:', error.message);
  }
}

// ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
if (require.main === module) {
  main();
}

module.exports = {
  testStatusCheck,
  createTestBorrower
};
