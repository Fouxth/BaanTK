// üîç Script ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Firebase Functions Logs
const { exec } = require('child_process');
const util = require('util');

const execAsync = util.promisify(exec);

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á logs ‡∏à‡∏≤‡∏Å Firebase Functions
async function getFirebaseLogs(functionName = 'lineWebhook', limit = 50) {
  try {
    console.log(`üìã ‡∏î‡∏∂‡∏á logs ‡∏Ç‡∏≠‡∏á function: ${functionName}`);
    console.log(`üìä ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô: ${limit} ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î`);
    console.log('='.repeat(50));
    
    const command = `firebase functions:log --only ${functionName} --limit ${limit}`;
    console.log(`üîß Command: ${command}`);
    
    const { stdout, stderr } = await execAsync(command, {
      cwd: '/Users/pn/Desktop/Fouxth/BaanTK'
    });
    
    if (stderr) {
      console.log('‚ö†Ô∏è Warnings:', stderr);
    }
    
    console.log('üìÑ Logs:');
    console.log(stdout);
    
    return stdout;
    
  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á logs:', error.message);
    throw error;
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö deployment status
async function checkDeploymentStatus() {
  try {
    console.log('üöÄ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ deployment...');
    
    const { stdout } = await execAsync('firebase functions:list', {
      cwd: '/Users/pn/Desktop/Fouxth/BaanTK'
    });
    
    console.log('üìã Functions ‡∏ó‡∏µ‡πà deploy ‡πÅ‡∏•‡πâ‡∏ß:');
    console.log(stdout);
    
    return stdout;
    
  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö deployment:', error.message);
    throw error;
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö config
async function checkFirebaseConfig() {
  try {
    console.log('‚öôÔ∏è ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Firebase config...');
    
    const { stdout } = await execAsync('firebase use', {
      cwd: '/Users/pn/Desktop/Fouxth/BaanTK'
    });
    
    console.log('üéØ Active project:');
    console.log(stdout);
    
    return stdout;
    
  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö config:', error.message);
    throw error;
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏° logs ‡πÅ‡∏ö‡∏ö real-time
async function watchLogs(functionName = 'lineWebhook') {
  try {
    console.log(`üëÅÔ∏è ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏° logs ‡πÅ‡∏ö‡∏ö real-time ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö: ${functionName}`);
    console.log('üì¢ ‡∏Å‡∏î Ctrl+C ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏¢‡∏∏‡∏î');
    console.log('='.repeat(50));
    
    const command = `firebase functions:log --only ${functionName} --follow`;
    
    const childProcess = exec(command, {
      cwd: '/Users/pn/Desktop/Fouxth/BaanTK'
    });
    
    childProcess.stdout.on('data', (data) => {
      console.log(data);
    });
    
    childProcess.stderr.on('data', (data) => {
      console.error('‚ö†Ô∏è', data);
    });
    
    childProcess.on('close', (code) => {
      console.log(`\nüìã ‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏° logs ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î (exit code: ${code})`);
    });
    
    // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Ctrl+C
    process.on('SIGINT', () => {
      console.log('\nüõë ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏° logs...');
      childProcess.kill();
      process.exit(0);
    });
    
  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏° logs:', error.message);
    throw error;
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å
async function main() {
  const args = process.argv.slice(2);
  const command = args[0] || 'logs';
  
  try {
    console.log('üîç Firebase Functions Log Checker');
    console.log(`‚è∞ ${new Date().toLocaleString('th-TH')}`);
    console.log('='.repeat(70));
    
    switch (command) {
      case 'logs':
        await getFirebaseLogs();
        break;
        
      case 'watch':
        await watchLogs();
        break;
        
      case 'status':
        await checkDeploymentStatus();
        break;
        
      case 'config':
        await checkFirebaseConfig();
        break;
        
      case 'all':
        console.log('1Ô∏è‚É£ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö config...\n');
        await checkFirebaseConfig();
        
        console.log('\n2Ô∏è‚É£ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö deployment status...\n');
        await checkDeploymentStatus();
        
        console.log('\n3Ô∏è‚É£ ‡∏î‡∏∂‡∏á logs...\n');
        await getFirebaseLogs();
        break;
        
      default:
        console.log('üìñ ‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:');
        console.log('  node check-firebase-logs.js [command]');
        console.log('');
        console.log('üîß Commands:');
        console.log('  logs     - ‡∏î‡∏∂‡∏á logs ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î (default)');
        console.log('  watch    - ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏° logs ‡πÅ‡∏ö‡∏ö real-time');
        console.log('  status   - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ deployment');
        console.log('  config   - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Firebase config');
        console.log('  all      - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á');
        break;
    }
    
  } catch (error) {
    console.error('üí• ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error.message);
    process.exit(1);
  }
}

// ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
if (require.main === module) {
  main();
}

module.exports = {
  getFirebaseLogs,
  checkDeploymentStatus,
  checkFirebaseConfig,
  watchLogs
};
