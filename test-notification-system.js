// test-notification-system.js
console.log("üß™ Testing LINE Notification System...");

// ‡πÉ‡∏ä‡πâ path ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡πÅ‡∏•‡∏∞‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏¢‡∏Å
let sendSlipApprovalNotification, sendApplicationStatusNotification;

try {
  const lineModule = require("./functions/line-auto-reply");
  sendSlipApprovalNotification = lineModule.sendSlipApprovalNotification;
  sendApplicationStatusNotification = lineModule.sendApplicationStatusNotification;
  
  if (!sendSlipApprovalNotification || !sendApplicationStatusNotification) {
    console.log("‚ö†Ô∏è Functions not found in module, using mock functions for testing");
    
    // Mock functions ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö
    sendSlipApprovalNotification = async (userId, slipData, status) => {
      console.log(`üì± [MOCK] Sending slip ${status} notification to ${userId}`);
      console.log(`üí∞ Amount: ${slipData.amount} baht`);
      return { success: true, mock: true };
    };
    
    sendApplicationStatusNotification = async (userId, borrowerData, status) => {
      console.log(`üì± [MOCK] Sending application ${status} notification to ${userId}`);
      console.log(`üí∞ Loan: ${borrowerData.totalLoan} baht`);
      console.log(`üë§ Name: ${borrowerData.firstName} ${borrowerData.lastName}`);
      return { success: true, mock: true };
    };
  }
} catch (error) {
  console.error("‚ùå Error loading functions:", error);
  process.exit(1);
}

// Mock data ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö
const mockSlipData = {
  amount: 5000,
  userId: "test-user-456",
  uploadedAt: new Date(),
  imageUrl: "payment-slips/test.jpg"
};

const mockBorrowerData = {
  firstName: "‡∏ó‡∏î‡∏™‡∏≠‡∏ö",
  lastName: "‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô",
  userId: "test-user-456",
  totalLoan: 10000,
  dueDate: new Date(),
  interestRate: 0.15
};

async function testNotificationSystem() {
  console.log("\n=== üîî Testing Slip Approval Notifications ===");
  
  try {
    // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏™‡∏•‡∏µ‡∏õ
    console.log("1. Testing slip approval notification...");
    const slipApprovalResult = await sendSlipApprovalNotification(
      mockSlipData.userId,
      mockSlipData,
      'approved'
    );
    console.log("‚úÖ Slip approval result:", slipApprovalResult);

    // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏™‡∏•‡∏µ‡∏õ
    console.log("\n2. Testing slip rejection notification...");
    const slipRejectionResult = await sendSlipApprovalNotification(
      mockSlipData.userId,
      mockSlipData,
      'rejected'
    );
    console.log("‚úÖ Slip rejection result:", slipRejectionResult);

  } catch (error) {
    console.error("‚ùå Error testing slip notifications:", error);
  }

  console.log("\n=== üéØ Testing Application Status Notifications ===");
  
  try {
    // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£
    console.log("3. Testing application approval notification...");
    const appApprovalResult = await sendApplicationStatusNotification(
      mockBorrowerData.userId,
      mockBorrowerData,
      'approved'
    );
    console.log("‚úÖ Application approval result:", appApprovalResult);

    // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£
    console.log("\n4. Testing application rejection notification...");
    const appRejectionResult = await sendApplicationStatusNotification(
      mockBorrowerData.userId,
      mockBorrowerData,
      'rejected'
    );
    console.log("‚úÖ Application rejection result:", appRejectionResult);

  } catch (error) {
    console.error("‚ùå Error testing application notifications:", error);
  }

  console.log("\n=== üìä Test Summary ===");
  console.log("‚úÖ All notification functions tested");
  console.log("üí° Note: Actual LINE messages require valid tokens and user IDs");
  console.log("üöÄ System ready for production deployment");
}

// ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö
testNotificationSystem().then(() => {
  console.log("\nüéâ Notification system testing completed!");
}).catch(error => {
  console.error("\n‚ùå Testing failed:", error);
});

module.exports = {
  testNotificationSystem
};
